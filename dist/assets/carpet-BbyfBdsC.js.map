{"version":3,"file":"carpet-BbyfBdsC.js","sources":["../../carpet-calculator.js"],"sourcesContent":["// Carpet Calculator JavaScript\r\n\r\nclass CarpetCalculator {\r\n    constructor() {\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.carpetWidth = document.getElementById('carpet-width');\r\n        this.carpetPrice = document.getElementById('carpet-price');\r\n        this.paddingPrice = document.getElementById('padding-price');\r\n        this.installationPrice = document.getElementById('installation-price');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.seamDirection = document.getElementById('seam-direction');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.carpetWidth, this.carpetPrice,\r\n         this.paddingPrice, this.installationPrice, this.wasteFactor, this.seamDirection].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = parseFloat(this.roomLength.value) || 0;\r\n        const roomW = parseFloat(this.roomWidth.value) || 0;\r\n        const carpetW = parseFloat(this.carpetWidth.value) || 12;\r\n        const carpetPricePerYd = parseFloat(this.carpetPrice.value) || 0;\r\n        const paddingPricePerYd = parseFloat(this.paddingPrice.value) || 0;\r\n        const installPricePerYd = parseFloat(this.installationPrice.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const seamDir = this.seamDirection.value;\r\n\r\n        if (roomL <= 0 || roomW <= 0) {\r\n            this.showError('Please enter valid room dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area\r\n        const roomAreaSqFt = roomL * roomW;\r\n        const roomAreaSqYd = roomAreaSqFt / 9;\r\n\r\n        // Calculate carpet needed based on seam direction\r\n        const carpetCalc = this.calculateCarpetNeeded(roomL, roomW, carpetW, seamDir, waste);\r\n\r\n        // Calculate costs\r\n        const carpetCost = carpetCalc.carpetNeededYards * carpetPricePerYd;\r\n        const paddingCost = roomAreaSqYd * paddingPricePerYd;\r\n        const installationCost = roomAreaSqYd * installPricePerYd;\r\n        const totalCost = carpetCost + paddingCost + installationCost;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomAreaSqFt: roomAreaSqFt.toFixed(1),\r\n            roomAreaSqYd: roomAreaSqYd.toFixed(1),\r\n            carpetNeededYards: carpetCalc.carpetNeededYards.toFixed(1),\r\n            linearFeet: carpetCalc.linearFeet.toFixed(1),\r\n            seamsRequired: carpetCalc.seamsRequired,\r\n            carpetCost: carpetCost.toFixed(2),\r\n            paddingCost: paddingCost.toFixed(2),\r\n            installationCost: installationCost.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    calculateCarpetNeeded(roomL, roomW, carpetW, seamDirection, waste) {\r\n        let linearFeet, seamsRequired, carpetNeededYards;\r\n\r\n        if (seamDirection === 'optimal') {\r\n            // Calculate both directions and choose the most efficient\r\n            const lengthWise = this.calculateForDirection(roomL, roomW, carpetW);\r\n            const widthWise = this.calculateForDirection(roomW, roomL, carpetW);\r\n\r\n            if (lengthWise.carpetNeeded <= widthWise.carpetNeeded) {\r\n                linearFeet = lengthWise.linearFeet;\r\n                seamsRequired = lengthWise.seamsRequired;\r\n                carpetNeededYards = lengthWise.carpetNeeded;\r\n            } else {\r\n                linearFeet = widthWise.linearFeet;\r\n                seamsRequired = widthWise.seamsRequired;\r\n                carpetNeededYards = widthWise.carpetNeeded;\r\n            }\r\n        } else if (seamDirection === 'length') {\r\n            const calc = this.calculateForDirection(roomL, roomW, carpetW);\r\n            linearFeet = calc.linearFeet;\r\n            seamsRequired = calc.seamsRequired;\r\n            carpetNeededYards = calc.carpetNeeded;\r\n        } else { // width direction\r\n            const calc = this.calculateForDirection(roomW, roomL, carpetW);\r\n            linearFeet = calc.linearFeet;\r\n            seamsRequired = calc.seamsRequired;\r\n            carpetNeededYards = calc.carpetNeeded;\r\n        }\r\n\r\n        // Apply waste factor\r\n        carpetNeededYards *= (1 + waste / 100);\r\n\r\n        return {\r\n            carpetNeededYards,\r\n            linearFeet,\r\n            seamsRequired\r\n        };\r\n    }\r\n\r\n    calculateForDirection(primaryDim, secondaryDim, carpetWidth) {\r\n        let seamsRequired = 0;\r\n        let linearFeet;\r\n\r\n        if (secondaryDim <= carpetWidth) {\r\n            // No seams needed\r\n            linearFeet = primaryDim;\r\n            seamsRequired = 0;\r\n        } else {\r\n            // Seams needed\r\n            const strips = Math.ceil(secondaryDim / carpetWidth);\r\n            seamsRequired = strips - 1;\r\n            linearFeet = primaryDim * strips;\r\n        }\r\n\r\n        // Convert to square yards\r\n        const carpetNeeded = (linearFeet * carpetWidth) / 9;\r\n\r\n        return {\r\n            linearFeet,\r\n            seamsRequired,\r\n            carpetNeeded\r\n        };\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('room-area').textContent = `${results.roomAreaSqFt} sq ft`;\r\n        document.getElementById('room-area-yards').textContent = `${results.roomAreaSqYd} sq yd`;\r\n        document.getElementById('carpet-needed').textContent = `${results.carpetNeededYards} sq yd`;\r\n        document.getElementById('linear-feet').textContent = `${results.linearFeet} ft`;\r\n        document.getElementById('seams-required').textContent = results.seamsRequired;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if prices are entered\r\n        if (parseFloat(results.carpetCost) > 0 || parseFloat(results.paddingCost) > 0 || parseFloat(results.installationCost) > 0) {\r\n            document.getElementById('carpet-cost').textContent = `$${results.carpetCost}`;\r\n            document.getElementById('padding-cost').textContent = `$${results.paddingCost}`;\r\n            document.getElementById('installation-cost').textContent = `$${results.installationCost}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomLength, this.roomWidth, this.carpetPrice,\r\n         this.paddingPrice, this.installationPrice].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.carpetWidth.value = '12';\r\n        this.wasteFactor.value = '10';\r\n        this.seamDirection.value = 'optimal';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('room-area-yards').textContent = '0 sq yd';\r\n        document.getElementById('carpet-needed').textContent = '0 sq yd';\r\n        document.getElementById('linear-feet').textContent = '0 ft';\r\n        document.getElementById('seams-required').textContent = '0';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n        // Could implement toast notification here\r\n    }\r\n}\r\n\r\n// Carpet pricing guidelines (national averages)\r\nconst carpetPricingGuide = {\r\n    'budget': { min: 15, max: 25, description: 'Builder grade, basic fibers' },\r\n    'mid-range': { min: 25, max: 45, description: 'Good quality, popular brands' },\r\n    'premium': { min: 45, max: 80, description: 'High-end, luxury fibers' },\r\n    'luxury': { min: 80, max: 150, description: 'Designer, specialty carpets' }\r\n};\r\n\r\n// Padding recommendations\r\nconst paddingGuide = {\r\n    'basic': { price: 2.50, description: '4lb density, basic comfort' },\r\n    'standard': { price: 3.50, description: '6lb density, good support' },\r\n    'premium': { price: 5.00, description: '8lb density, maximum comfort' },\r\n    'memory-foam': { price: 7.50, description: 'Memory foam, luxury feel' }\r\n};\r\n\r\n// Installation complexity factors\r\nconst installationComplexity = {\r\n    'simple': { factor: 1.0, description: 'Rectangular room, no obstacles' },\r\n    'moderate': { factor: 1.2, description: 'Some cuts around fixtures' },\r\n    'complex': { factor: 1.5, description: 'Many obstacles, custom cuts' },\r\n    'stairs': { factor: 2.0, description: 'Stair installation' }\r\n};\r\n\r\n// Utility functions\r\nfunction estimateCarpetLife(quality, traffic) {\r\n    const baseYears = {\r\n        'budget': 5,\r\n        'mid-range': 10,\r\n        'premium': 15,\r\n        'luxury': 20\r\n    };\r\n\r\n    const trafficMultiplier = {\r\n        'low': 1.2,\r\n        'medium': 1.0,\r\n        'high': 0.7,\r\n        'very-high': 0.5\r\n    };\r\n\r\n    return Math.round(baseYears[quality] * trafficMultiplier[traffic]);\r\n}\r\n\r\nfunction calculateMaintenanceCost(sqYards, quality) {\r\n    const annualCostPerYard = {\r\n        'budget': 2,\r\n        'mid-range': 3,\r\n        'premium': 4,\r\n        'luxury': 6\r\n    };\r\n\r\n    return sqYards * annualCostPerYard[quality];\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new CarpetCalculator();\r\n        console.log('Carpet Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Carpet Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = CarpetCalculator;\r\n}\r\n"],"names":["CarpetCalculator","input","roomL","roomW","carpetW","carpetPricePerYd","paddingPricePerYd","installPricePerYd","waste","seamDir","roomAreaSqFt","roomAreaSqYd","carpetCalc","carpetCost","paddingCost","installationCost","totalCost","seamDirection","linearFeet","seamsRequired","carpetNeededYards","lengthWise","widthWise","calc","primaryDim","secondaryDim","carpetWidth","strips","carpetNeeded","results","message","error","errorDiv","main"],"mappings":"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"}