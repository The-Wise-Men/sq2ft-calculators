{"version":3,"file":"tile-EyRcc_sh.js","sources":["../../tile-calculator.js"],"sourcesContent":["// Tile Calculator JavaScript\r\n\r\nclass TileCalculator {\r\n    constructor() {\r\n\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.tileLength = document.getElementById('tile-length');\r\n        this.tileWidth = document.getElementById('tile-width');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.tilePrice = document.getElementById('tile-price');\r\n        this.groutWidth = document.getElementById('grout-width');\r\n        this.tilesPerBox = document.getElementById('tiles-per-box');\r\n\r\n        this.setupPresetButtons();\r\n        this.setupTileSpecificListeners();\r\n    }\r\n\r\n    // Basic calculator functionality\r\n    getInputValue(id, defaultValue = 0) {\r\n        const input = document.getElementById(id);\r\n        if (!input) return defaultValue;\r\n        return parseFloat(input.value) || defaultValue;\r\n    }\r\n\r\n    setResultValue(id, value, format = 'number') {\r\n        const element = document.getElementById(id);\r\n        if (element) {\r\n            let formattedValue = value;\r\n            if (format === 'currency') {\r\n                formattedValue = `$${value.toFixed(2)}`;\r\n            } else if (format === 'integer') {\r\n                formattedValue = Math.round(value);\r\n            } else if (format === 'percentage') {\r\n                formattedValue = `${value.toFixed(2)}%`;\r\n            }\r\n            element.textContent = formattedValue;\r\n        }\r\n    }\r\n\r\n    showLoading() {\r\n        const calculateBtn = document.getElementById('calculate-btn');\r\n        if (calculateBtn) {\r\n            calculateBtn.innerHTML = '<i class=\"fa-solid fa-spinner fa-spin\"></i> Calculate';\r\n            calculateBtn.disabled = true;\r\n        }\r\n    }\r\n\r\n    hideLoading() {\r\n        const calculateBtn = document.getElementById('calculate-btn');\r\n        if (calculateBtn) {\r\n            calculateBtn.innerHTML = 'Calculate';\r\n            calculateBtn.disabled = false;\r\n        }\r\n    }\r\n\r\n    showError(message) {\r\n        console.error('Tile Calculator Error:', message);\r\n        // You can add UI error display here\r\n    }\r\n\r\n    getCalculateButtonText() {\r\n        return '📏 Calculate Tiles Needed';\r\n    }\r\n\r\n    setupTileSpecificListeners() {\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.wasteFactor, this.tilePrice, this.groutWidth].forEach(input => {\r\n            if (input) {\r\n                input.addEventListener('input', () => this.handleCalculate());\r\n            }\r\n        });\r\n\r\n        // Box calculation on tiles per box change\r\n        if (this.tilesPerBox) {\r\n            this.tilesPerBox.addEventListener('input', () => this.updateBoxCount());\r\n        }\r\n    }\r\n\r\n    setupPresetButtons() {\r\n        const presetButtons = document.querySelectorAll('.preset-btn');\r\n        presetButtons.forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const size = btn.dataset.size;\r\n                const [length, width] = size.split('x');\r\n                this.tileLength.value = length;\r\n                this.tileWidth.value = width;\r\n                this.calculate();\r\n            });\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = this.getInputValue('room-length');\r\n        const roomW = this.getInputValue('room-width');\r\n        const tileL = this.getInputValue('tile-length');\r\n        const tileW = this.getInputValue('tile-width');\r\n        const waste = this.getInputValue('waste-factor', 10);\r\n        const price = this.getInputValue('tile-price');\r\n        const grout = this.getInputValue('grout-width', 3);\r\n\r\n        if (roomL <= 0 || roomW <= 0 || tileL <= 0 || tileW <= 0) {\r\n            this.showError('Please enter valid dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area in square feet\r\n        const roomArea = roomL * roomW;\r\n\r\n        // Calculate tile area in square feet (convert inches to feet)\r\n        const tileAreaSqFt = (tileL * tileW) / 144;\r\n\r\n        // Calculate base number of tiles needed\r\n        const baseTiles = Math.ceil(roomArea / tileAreaSqFt);\r\n\r\n        // Calculate tiles with waste factor\r\n        const tilesWithWaste = Math.ceil(baseTiles * (1 + waste / 100));\r\n\r\n        // Calculate grout coverage (approximate)\r\n        const groutCoverage = this.calculateGroutCoverage(roomL, roomW, tileL, tileW, grout);\r\n\r\n        // Calculate estimated cost\r\n        const estimatedCost = roomArea * price;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomArea: roomArea.toFixed(2),\r\n            baseTiles: baseTiles,\r\n            tilesWithWaste: tilesWithWaste,\r\n            groutCoverage: groutCoverage.toFixed(2),\r\n            estimatedCost: estimatedCost.toFixed(2)\r\n        });\r\n\r\n        this.updateBoxCount();\r\n    }\r\n\r\n    calculateGroutCoverage(roomL, roomW, tileL, tileW, groutMM) {\r\n        // Convert grout width from mm to inches\r\n        const groutInches = groutMM / 25.4;\r\n\r\n        // Calculate approximate grout coverage\r\n        // This is a simplified calculation\r\n        const tilesPerRow = Math.ceil((roomL * 12) / (tileL + groutInches));\r\n        const tilesPerColumn = Math.ceil((roomW * 12) / (tileW + groutInches));\r\n\r\n        const horizontalGroutArea = tilesPerColumn * (roomL * 12) * groutInches;\r\n        const verticalGroutArea = tilesPerRow * (roomW * 12) * groutInches;\r\n\r\n        // Convert back to square feet\r\n        return (horizontalGroutArea + verticalGroutArea) / 144;\r\n    }\r\n\r\n    updateResults(results) {\r\n        this.setResultValue('room-area', results.roomArea, 'integer');\r\n        this.setResultValue('tiles-needed', results.baseTiles, 'integer');\r\n        this.setResultValue('tiles-with-waste', results.tilesWithWaste, 'integer');\r\n        this.setResultValue('grout-coverage', results.groutCoverage, 'integer');\r\n        this.setResultValue('estimated-cost', results.estimatedCost, 'currency');\r\n\r\n        // Store for box calculation\r\n        this.currentTilesNeeded = results.tilesWithWaste;\r\n    }\r\n\r\n    updateBoxCount() {\r\n        const tilesPerBox = parseInt(this.tilesPerBox.value) || 0;\r\n        const boxCountElement = document.getElementById('box-count');\r\n\r\n        if (tilesPerBox > 0 && this.currentTilesNeeded) {\r\n            const boxesNeeded = Math.ceil(this.currentTilesNeeded / tilesPerBox);\r\n            boxCountElement.textContent = `${boxesNeeded} boxes`;\r\n        } else {\r\n            boxCountElement.textContent = '0 boxes';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.tilePrice, this.tilesPerBox].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.wasteFactor.value = '10';\r\n        this.groutWidth.value = '3';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('tiles-needed').textContent = '0 tiles';\r\n        document.getElementById('tiles-with-waste').textContent = '0 tiles';\r\n        document.getElementById('grout-coverage').textContent = '0 sq ft';\r\n        document.getElementById('estimated-cost').textContent = '$0.00';\r\n        document.getElementById('box-count').textContent = '0 boxes';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        // You could implement a toast notification or modal here\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Common tile sizes for quick reference\r\nconst commonTileSizes = {\r\n    '12x12': { length: 12, width: 12, name: '12\" × 12\" Standard' },\r\n    '12x24': { length: 12, width: 24, name: '12\" × 24\" Plank' },\r\n    '6x24': { length: 6, width: 24, name: '6\" × 24\" Wood-look' },\r\n    '18x18': { length: 18, width: 18, name: '18\" × 18\" Large Format' },\r\n    '24x24': { length: 24, width: 24, name: '24\" × 24\" Extra Large' },\r\n    '4x4': { length: 4, width: 4, name: '4\" × 4\" Small' },\r\n    '6x6': { length: 6, width: 6, name: '6\" × 6\" Medium' },\r\n    '8x8': { length: 8, width: 8, name: '8\" × 8\" Traditional' }\r\n};\r\n\r\n// Waste factor recommendations\r\nconst wasteFactorGuide = {\r\n    'straight': { min: 10, max: 15, description: 'Straight/Grid Pattern' },\r\n    'diagonal': { min: 15, max: 20, description: 'Diagonal Pattern' },\r\n    'herringbone': { min: 15, max: 25, description: 'Herringbone Pattern' },\r\n    'complex': { min: 20, max: 30, description: 'Complex Patterns' },\r\n    'irregular': { min: 15, max: 25, description: 'Irregular Rooms' }\r\n};\r\n\r\n// Utility functions\r\nfunction getTileRecommendation(roomArea) {\r\n    if (roomArea < 50) {\r\n        return 'Consider 12\"×12\" or smaller tiles for better proportions';\r\n    } else if (roomArea < 150) {\r\n        return '12\"×12\" or 12\"×24\" tiles work well for this size room';\r\n    } else if (roomArea < 300) {\r\n        return '12\"×24\" or 18\"×18\" tiles are ideal for larger spaces';\r\n    } else {\r\n        return '18\"×18\" or 24\"×24\" large format tiles for expansive areas';\r\n    }\r\n}\r\n\r\nfunction calculateGroutBags(groutCoverage, groutType = 'sanded') {\r\n    // Standard grout coverage: 25 lb bag covers ~150-200 sq ft\r\n    const coveragePerBag = groutType === 'sanded' ? 175 : 200;\r\n    return Math.ceil(groutCoverage / coveragePerBag);\r\n}\r\n\r\nfunction estimateInstallationTime(tilesNeeded, complexity = 'medium') {\r\n    const tilesPerHour = {\r\n        'easy': 15,    // Large tiles, straight pattern\r\n        'medium': 12,  // Standard tiles, basic pattern\r\n        'hard': 8      // Small tiles or complex pattern\r\n    };\r\n\r\n    const hoursNeeded = tilesNeeded / tilesPerHour[complexity];\r\n    return Math.ceil(hoursNeeded);\r\n}\r\n\r\n// Initialize calculator when page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new TileCalculator();\r\n        console.log('Tile Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Tile Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\n// Initialize the calculator when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new TileCalculator();\r\n    } catch (error) {\r\n        console.error('Failed to initialize Tile Calculator:', error);\r\n    }\r\n});\r\n"],"names":["TileCalculator","id","defaultValue","input","value","format","element","formattedValue","calculateBtn","message","btn","size","length","width","roomL","roomW","tileL","tileW","waste","price","grout","roomArea","tileAreaSqFt","baseTiles","tilesWithWaste","groutCoverage","estimatedCost","groutMM","groutInches","tilesPerRow","horizontalGroutArea","verticalGroutArea","results","tilesPerBox","boxCountElement","boxesNeeded","error","errorDiv","main"],"mappings":"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"}