{"version":3,"file":"carpet-legacy-C9weVmPn.js","sources":["../../carpet-calculator.js"],"sourcesContent":["// Carpet Calculator JavaScript\r\n\r\nclass CarpetCalculator {\r\n    constructor() {\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.carpetWidth = document.getElementById('carpet-width');\r\n        this.carpetPrice = document.getElementById('carpet-price');\r\n        this.paddingPrice = document.getElementById('padding-price');\r\n        this.installationPrice = document.getElementById('installation-price');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.seamDirection = document.getElementById('seam-direction');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.carpetWidth, this.carpetPrice,\r\n         this.paddingPrice, this.installationPrice, this.wasteFactor, this.seamDirection].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = parseFloat(this.roomLength.value) || 0;\r\n        const roomW = parseFloat(this.roomWidth.value) || 0;\r\n        const carpetW = parseFloat(this.carpetWidth.value) || 12;\r\n        const carpetPricePerYd = parseFloat(this.carpetPrice.value) || 0;\r\n        const paddingPricePerYd = parseFloat(this.paddingPrice.value) || 0;\r\n        const installPricePerYd = parseFloat(this.installationPrice.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const seamDir = this.seamDirection.value;\r\n\r\n        if (roomL <= 0 || roomW <= 0) {\r\n            this.showError('Please enter valid room dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area\r\n        const roomAreaSqFt = roomL * roomW;\r\n        const roomAreaSqYd = roomAreaSqFt / 9;\r\n\r\n        // Calculate carpet needed based on seam direction\r\n        const carpetCalc = this.calculateCarpetNeeded(roomL, roomW, carpetW, seamDir, waste);\r\n\r\n        // Calculate costs\r\n        const carpetCost = carpetCalc.carpetNeededYards * carpetPricePerYd;\r\n        const paddingCost = roomAreaSqYd * paddingPricePerYd;\r\n        const installationCost = roomAreaSqYd * installPricePerYd;\r\n        const totalCost = carpetCost + paddingCost + installationCost;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomAreaSqFt: roomAreaSqFt.toFixed(1),\r\n            roomAreaSqYd: roomAreaSqYd.toFixed(1),\r\n            carpetNeededYards: carpetCalc.carpetNeededYards.toFixed(1),\r\n            linearFeet: carpetCalc.linearFeet.toFixed(1),\r\n            seamsRequired: carpetCalc.seamsRequired,\r\n            carpetCost: carpetCost.toFixed(2),\r\n            paddingCost: paddingCost.toFixed(2),\r\n            installationCost: installationCost.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    calculateCarpetNeeded(roomL, roomW, carpetW, seamDirection, waste) {\r\n        let linearFeet, seamsRequired, carpetNeededYards;\r\n\r\n        if (seamDirection === 'optimal') {\r\n            // Calculate both directions and choose the most efficient\r\n            const lengthWise = this.calculateForDirection(roomL, roomW, carpetW);\r\n            const widthWise = this.calculateForDirection(roomW, roomL, carpetW);\r\n\r\n            if (lengthWise.carpetNeeded <= widthWise.carpetNeeded) {\r\n                linearFeet = lengthWise.linearFeet;\r\n                seamsRequired = lengthWise.seamsRequired;\r\n                carpetNeededYards = lengthWise.carpetNeeded;\r\n            } else {\r\n                linearFeet = widthWise.linearFeet;\r\n                seamsRequired = widthWise.seamsRequired;\r\n                carpetNeededYards = widthWise.carpetNeeded;\r\n            }\r\n        } else if (seamDirection === 'length') {\r\n            const calc = this.calculateForDirection(roomL, roomW, carpetW);\r\n            linearFeet = calc.linearFeet;\r\n            seamsRequired = calc.seamsRequired;\r\n            carpetNeededYards = calc.carpetNeeded;\r\n        } else { // width direction\r\n            const calc = this.calculateForDirection(roomW, roomL, carpetW);\r\n            linearFeet = calc.linearFeet;\r\n            seamsRequired = calc.seamsRequired;\r\n            carpetNeededYards = calc.carpetNeeded;\r\n        }\r\n\r\n        // Apply waste factor\r\n        carpetNeededYards *= (1 + waste / 100);\r\n\r\n        return {\r\n            carpetNeededYards,\r\n            linearFeet,\r\n            seamsRequired\r\n        };\r\n    }\r\n\r\n    calculateForDirection(primaryDim, secondaryDim, carpetWidth) {\r\n        let seamsRequired = 0;\r\n        let linearFeet;\r\n\r\n        if (secondaryDim <= carpetWidth) {\r\n            // No seams needed\r\n            linearFeet = primaryDim;\r\n            seamsRequired = 0;\r\n        } else {\r\n            // Seams needed\r\n            const strips = Math.ceil(secondaryDim / carpetWidth);\r\n            seamsRequired = strips - 1;\r\n            linearFeet = primaryDim * strips;\r\n        }\r\n\r\n        // Convert to square yards\r\n        const carpetNeeded = (linearFeet * carpetWidth) / 9;\r\n\r\n        return {\r\n            linearFeet,\r\n            seamsRequired,\r\n            carpetNeeded\r\n        };\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('room-area').textContent = `${results.roomAreaSqFt} sq ft`;\r\n        document.getElementById('room-area-yards').textContent = `${results.roomAreaSqYd} sq yd`;\r\n        document.getElementById('carpet-needed').textContent = `${results.carpetNeededYards} sq yd`;\r\n        document.getElementById('linear-feet').textContent = `${results.linearFeet} ft`;\r\n        document.getElementById('seams-required').textContent = results.seamsRequired;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if prices are entered\r\n        if (parseFloat(results.carpetCost) > 0 || parseFloat(results.paddingCost) > 0 || parseFloat(results.installationCost) > 0) {\r\n            document.getElementById('carpet-cost').textContent = `$${results.carpetCost}`;\r\n            document.getElementById('padding-cost').textContent = `$${results.paddingCost}`;\r\n            document.getElementById('installation-cost').textContent = `$${results.installationCost}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomLength, this.roomWidth, this.carpetPrice,\r\n         this.paddingPrice, this.installationPrice].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.carpetWidth.value = '12';\r\n        this.wasteFactor.value = '10';\r\n        this.seamDirection.value = 'optimal';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('room-area-yards').textContent = '0 sq yd';\r\n        document.getElementById('carpet-needed').textContent = '0 sq yd';\r\n        document.getElementById('linear-feet').textContent = '0 ft';\r\n        document.getElementById('seams-required').textContent = '0';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n        // Could implement toast notification here\r\n    }\r\n}\r\n\r\n// Carpet pricing guidelines (national averages)\r\nconst carpetPricingGuide = {\r\n    'budget': { min: 15, max: 25, description: 'Builder grade, basic fibers' },\r\n    'mid-range': { min: 25, max: 45, description: 'Good quality, popular brands' },\r\n    'premium': { min: 45, max: 80, description: 'High-end, luxury fibers' },\r\n    'luxury': { min: 80, max: 150, description: 'Designer, specialty carpets' }\r\n};\r\n\r\n// Padding recommendations\r\nconst paddingGuide = {\r\n    'basic': { price: 2.50, description: '4lb density, basic comfort' },\r\n    'standard': { price: 3.50, description: '6lb density, good support' },\r\n    'premium': { price: 5.00, description: '8lb density, maximum comfort' },\r\n    'memory-foam': { price: 7.50, description: 'Memory foam, luxury feel' }\r\n};\r\n\r\n// Installation complexity factors\r\nconst installationComplexity = {\r\n    'simple': { factor: 1.0, description: 'Rectangular room, no obstacles' },\r\n    'moderate': { factor: 1.2, description: 'Some cuts around fixtures' },\r\n    'complex': { factor: 1.5, description: 'Many obstacles, custom cuts' },\r\n    'stairs': { factor: 2.0, description: 'Stair installation' }\r\n};\r\n\r\n// Utility functions\r\nfunction estimateCarpetLife(quality, traffic) {\r\n    const baseYears = {\r\n        'budget': 5,\r\n        'mid-range': 10,\r\n        'premium': 15,\r\n        'luxury': 20\r\n    };\r\n\r\n    const trafficMultiplier = {\r\n        'low': 1.2,\r\n        'medium': 1.0,\r\n        'high': 0.7,\r\n        'very-high': 0.5\r\n    };\r\n\r\n    return Math.round(baseYears[quality] * trafficMultiplier[traffic]);\r\n}\r\n\r\nfunction calculateMaintenanceCost(sqYards, quality) {\r\n    const annualCostPerYard = {\r\n        'budget': 2,\r\n        'mid-range': 3,\r\n        'premium': 4,\r\n        'luxury': 6\r\n    };\r\n\r\n    return sqYards * annualCostPerYard[quality];\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new CarpetCalculator();\r\n        console.log('Carpet Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Carpet Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = CarpetCalculator;\r\n}\r\n"],"names":["CarpetCalculator","constructor","this","roomLength","document","getElementById","roomWidth","carpetWidth","carpetPrice","paddingPrice","installationPrice","wasteFactor","seamDirection","calculateBtn","clearBtn","initializeEventListeners","addEventListener","calculate","clear","forEach","input","roomL","parseFloat","value","roomW","carpetW","carpetPricePerYd","paddingPricePerYd","installPricePerYd","waste","seamDir","showError","roomAreaSqFt","roomAreaSqYd","carpetCalc","calculateCarpetNeeded","carpetCost","carpetNeededYards","paddingCost","installationCost","totalCost","updateResults","toFixed","linearFeet","seamsRequired","lengthWise","calculateForDirection","widthWise","carpetNeeded","calc","primaryDim","secondaryDim","strips","Math","ceil","results","textContent","style","display","focus","message","console","error","log","errorDiv","createElement","className","innerHTML","main","querySelector","insertBefore","firstChild","module","exports"],"mappings":"oHAEA,MAAMA,EACFC,WAAAA,GACIC,KAAKC,WAAaC,SAASC,eAAe,eAC1CH,KAAKI,UAAYF,SAASC,eAAe,cACzCH,KAAKK,YAAcH,SAASC,eAAe,gBAC3CH,KAAKM,YAAcJ,SAASC,eAAe,gBAC3CH,KAAKO,aAAeL,SAASC,eAAe,iBAC5CH,KAAKQ,kBAAoBN,SAASC,eAAe,sBACjDH,KAAKS,YAAcP,SAASC,eAAe,gBAC3CH,KAAKU,cAAgBR,SAASC,eAAe,kBAE7CH,KAAKW,aAAeT,SAASC,eAAe,iBAC5CH,KAAKY,SAAWV,SAASC,eAAe,aAExCH,KAAKa,0BACT,CAEAA,wBAAAA,GACIb,KAAKW,aAAaG,iBAAiB,QAAS,IAAMd,KAAKe,aACvDf,KAAKY,SAASE,iBAAiB,QAAS,IAAMd,KAAKgB,SAGnD,CAAChB,KAAKC,WAAYD,KAAKI,UAAWJ,KAAKK,YAAaL,KAAKM,YACxDN,KAAKO,aAAcP,KAAKQ,kBAAmBR,KAAKS,YAAaT,KAAKU,eAAeO,QAAQC,IACtFA,EAAMJ,iBAAiB,QAAS,IAAMd,KAAKe,aAC3CG,EAAMJ,iBAAiB,SAAU,IAAMd,KAAKe,cAEpD,CAEAA,SAAAA,GACI,MAAMI,EAAQC,WAAWpB,KAAKC,WAAWoB,QAAU,EAC7CC,EAAQF,WAAWpB,KAAKI,UAAUiB,QAAU,EAC5CE,EAAUH,WAAWpB,KAAKK,YAAYgB,QAAU,GAChDG,EAAmBJ,WAAWpB,KAAKM,YAAYe,QAAU,EACzDI,EAAoBL,WAAWpB,KAAKO,aAAac,QAAU,EAC3DK,EAAoBN,WAAWpB,KAAKQ,kBAAkBa,QAAU,EAChEM,EAAQP,WAAWpB,KAAKS,YAAYY,QAAU,GAC9CO,EAAU5B,KAAKU,cAAcW,MAEnC,GAAIF,GAAS,GAAKG,GAAS,EAEvB,YADAtB,KAAK6B,UAAU,sCAKnB,MAAMC,EAAeX,EAAQG,EACvBS,EAAeD,EAAe,EAG9BE,EAAahC,KAAKiC,sBAAsBd,EAAOG,EAAOC,EAASK,EAASD,GAGxEO,EAAaF,EAAWG,kBAAoBX,EAC5CY,EAAcL,EAAeN,EAC7BY,EAAmBN,EAAeL,EAClCY,EAAYJ,EAAaE,EAAcC,EAG7CrC,KAAKuC,cAAc,CACfT,aAAcA,EAAaU,QAAQ,GACnCT,aAAcA,EAAaS,QAAQ,GACnCL,kBAAmBH,EAAWG,kBAAkBK,QAAQ,GACxDC,WAAYT,EAAWS,WAAWD,QAAQ,GAC1CE,cAAeV,EAAWU,cAC1BR,WAAYA,EAAWM,QAAQ,GAC/BJ,YAAaA,EAAYI,QAAQ,GACjCH,iBAAkBA,EAAiBG,QAAQ,GAC3CF,UAAWA,EAAUE,QAAQ,IAErC,CAEAP,qBAAAA,CAAsBd,EAAOG,EAAOC,EAASb,EAAeiB,GACxD,IAAIc,EAAYC,EAAeP,EAE/B,GAAsB,YAAlBzB,EAA6B,CAE7B,MAAMiC,EAAa3C,KAAK4C,sBAAsBzB,EAAOG,EAAOC,GACtDsB,EAAY7C,KAAK4C,sBAAsBtB,EAAOH,EAAOI,GAEvDoB,EAAWG,cAAgBD,EAAUC,cACrCL,EAAaE,EAAWF,WACxBC,EAAgBC,EAAWD,cAC3BP,EAAoBQ,EAAWG,eAE/BL,EAAaI,EAAUJ,WACvBC,EAAgBG,EAAUH,cAC1BP,EAAoBU,EAAUC,aAEtC,MAAO,GAAsB,WAAlBpC,EAA4B,CACnC,MAAMqC,EAAO/C,KAAK4C,sBAAsBzB,EAAOG,EAAOC,GACtDkB,EAAaM,EAAKN,WAClBC,EAAgBK,EAAKL,cACrBP,EAAoBY,EAAKD,YAC7B,KAAO,CACH,MAAMC,EAAO/C,KAAK4C,sBAAsBtB,EAAOH,EAAOI,GACtDkB,EAAaM,EAAKN,WAClBC,EAAgBK,EAAKL,cACrBP,EAAoBY,EAAKD,YAC7B,CAKA,OAFAX,GAAsB,EAAIR,EAAQ,IAE3B,CACHQ,oBACAM,aACAC,gBAER,CAEAE,qBAAAA,CAAsBI,EAAYC,EAAc5C,GAC5C,IACIoC,EADAC,EAAgB,EAGpB,GAAIO,GAAgB5C,EAEhBoC,EAAaO,EACbN,EAAgB,MACb,CAEH,MAAMQ,EAASC,KAAKC,KAAKH,EAAe5C,GACxCqC,EAAgBQ,EAAS,EACzBT,EAAaO,EAAaE,CAC9B,CAKA,MAAO,CACHT,aACAC,gBACAI,aALkBL,EAAapC,EAAe,EAOtD,CAEAkC,aAAAA,CAAcc,GACVnD,SAASC,eAAe,aAAamD,YAAc,GAAGD,EAAQvB,qBAC9D5B,SAASC,eAAe,mBAAmBmD,YAAc,GAAGD,EAAQtB,qBACpE7B,SAASC,eAAe,iBAAiBmD,YAAc,GAAGD,EAAQlB,0BAClEjC,SAASC,eAAe,eAAemD,YAAc,GAAGD,EAAQZ,gBAChEvC,SAASC,eAAe,kBAAkBmD,YAAcD,EAAQX,cAChExC,SAASC,eAAe,cAAcmD,YAAc,IAAID,EAAQf,YAG5DlB,WAAWiC,EAAQnB,YAAc,GAAKd,WAAWiC,EAAQjB,aAAe,GAAKhB,WAAWiC,EAAQhB,kBAAoB,GACpHnC,SAASC,eAAe,eAAemD,YAAc,IAAID,EAAQnB,aACjEhC,SAASC,eAAe,gBAAgBmD,YAAc,IAAID,EAAQjB,cAClElC,SAASC,eAAe,qBAAqBmD,YAAc,IAAID,EAAQhB,mBACvEnC,SAASC,eAAe,kBAAkBoD,MAAMC,QAAU,SAE1DtD,SAASC,eAAe,kBAAkBoD,MAAMC,QAAU,MAElE,CAEAxC,KAAAA,GAEI,CAAChB,KAAKC,WAAYD,KAAKI,UAAWJ,KAAKM,YACtCN,KAAKO,aAAcP,KAAKQ,mBAAmBS,QAAQC,IAChDA,EAAMG,MAAQ,KAIlBrB,KAAKK,YAAYgB,MAAQ,KACzBrB,KAAKS,YAAYY,MAAQ,KACzBrB,KAAKU,cAAcW,MAAQ,UAG3BnB,SAASC,eAAe,aAAamD,YAAc,UACnDpD,SAASC,eAAe,mBAAmBmD,YAAc,UACzDpD,SAASC,eAAe,iBAAiBmD,YAAc,UACvDpD,SAASC,eAAe,eAAemD,YAAc,OACrDpD,SAASC,eAAe,kBAAkBmD,YAAc,IACxDpD,SAASC,eAAe,cAAcmD,YAAc,QACpDpD,SAASC,eAAe,kBAAkBoD,MAAMC,QAAU,OAE1DxD,KAAKC,WAAWwD,OACpB,CAEA5B,SAAAA,CAAU6B,GACNC,QAAQC,MAAMF,EAElB,EA0DJxD,SAASY,iBAAiB,mBAAoB,KAC1C,IACI,IAAIhB,EACJ6D,QAAQE,IAAI,6CAChB,CAAE,MAAOD,GACLD,QAAQC,MAAM,0CAA2CA,GAEzD,MAAME,EAAW5D,SAAS6D,cAAc,OACxCD,EAASE,UAAY,gBACrBF,EAASG,UAAY,mFACrB,MAAMC,EAAOhE,SAASiE,cAAc,QAChCD,GACAA,EAAKE,aAAaN,EAAUI,EAAKG,WAEzC,SAIkB,IAAXC,GAA0BA,EAAOC,UACxCD,EAAOC,QAAUzE"}