{"version":3,"file":"tile-legacy-EKG3d48s.js","sources":["../../tile-calculator.js"],"sourcesContent":["// Tile Calculator JavaScript\r\n\r\nclass TileCalculator {\r\n    constructor() {\r\n\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.tileLength = document.getElementById('tile-length');\r\n        this.tileWidth = document.getElementById('tile-width');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.tilePrice = document.getElementById('tile-price');\r\n        this.groutWidth = document.getElementById('grout-width');\r\n        this.tilesPerBox = document.getElementById('tiles-per-box');\r\n\r\n        this.setupPresetButtons();\r\n        this.setupTileSpecificListeners();\r\n    }\r\n\r\n    // Basic calculator functionality\r\n    getInputValue(id, defaultValue = 0) {\r\n        const input = document.getElementById(id);\r\n        if (!input) return defaultValue;\r\n        return parseFloat(input.value) || defaultValue;\r\n    }\r\n\r\n    setResultValue(id, value, format = 'number') {\r\n        const element = document.getElementById(id);\r\n        if (element) {\r\n            let formattedValue = value;\r\n            if (format === 'currency') {\r\n                formattedValue = `$${value.toFixed(2)}`;\r\n            } else if (format === 'integer') {\r\n                formattedValue = Math.round(value);\r\n            } else if (format === 'percentage') {\r\n                formattedValue = `${value.toFixed(2)}%`;\r\n            }\r\n            element.textContent = formattedValue;\r\n        }\r\n    }\r\n\r\n    showLoading() {\r\n        const calculateBtn = document.getElementById('calculate-btn');\r\n        if (calculateBtn) {\r\n            calculateBtn.innerHTML = '<i class=\"fa-solid fa-spinner fa-spin\"></i> Calculate';\r\n            calculateBtn.disabled = true;\r\n        }\r\n    }\r\n\r\n    hideLoading() {\r\n        const calculateBtn = document.getElementById('calculate-btn');\r\n        if (calculateBtn) {\r\n            calculateBtn.innerHTML = 'Calculate';\r\n            calculateBtn.disabled = false;\r\n        }\r\n    }\r\n\r\n    showError(message) {\r\n        console.error('Tile Calculator Error:', message);\r\n        // You can add UI error display here\r\n    }\r\n\r\n    getCalculateButtonText() {\r\n        return '📏 Calculate Tiles Needed';\r\n    }\r\n\r\n    setupTileSpecificListeners() {\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.wasteFactor, this.tilePrice, this.groutWidth].forEach(input => {\r\n            if (input) {\r\n                input.addEventListener('input', () => this.handleCalculate());\r\n            }\r\n        });\r\n\r\n        // Box calculation on tiles per box change\r\n        if (this.tilesPerBox) {\r\n            this.tilesPerBox.addEventListener('input', () => this.updateBoxCount());\r\n        }\r\n    }\r\n\r\n    setupPresetButtons() {\r\n        const presetButtons = document.querySelectorAll('.preset-btn');\r\n        presetButtons.forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const size = btn.dataset.size;\r\n                const [length, width] = size.split('x');\r\n                this.tileLength.value = length;\r\n                this.tileWidth.value = width;\r\n                this.calculate();\r\n            });\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = this.getInputValue('room-length');\r\n        const roomW = this.getInputValue('room-width');\r\n        const tileL = this.getInputValue('tile-length');\r\n        const tileW = this.getInputValue('tile-width');\r\n        const waste = this.getInputValue('waste-factor', 10);\r\n        const price = this.getInputValue('tile-price');\r\n        const grout = this.getInputValue('grout-width', 3);\r\n\r\n        if (roomL <= 0 || roomW <= 0 || tileL <= 0 || tileW <= 0) {\r\n            this.showError('Please enter valid dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area in square feet\r\n        const roomArea = roomL * roomW;\r\n\r\n        // Calculate tile area in square feet (convert inches to feet)\r\n        const tileAreaSqFt = (tileL * tileW) / 144;\r\n\r\n        // Calculate base number of tiles needed\r\n        const baseTiles = Math.ceil(roomArea / tileAreaSqFt);\r\n\r\n        // Calculate tiles with waste factor\r\n        const tilesWithWaste = Math.ceil(baseTiles * (1 + waste / 100));\r\n\r\n        // Calculate grout coverage (approximate)\r\n        const groutCoverage = this.calculateGroutCoverage(roomL, roomW, tileL, tileW, grout);\r\n\r\n        // Calculate estimated cost\r\n        const estimatedCost = roomArea * price;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomArea: roomArea.toFixed(2),\r\n            baseTiles: baseTiles,\r\n            tilesWithWaste: tilesWithWaste,\r\n            groutCoverage: groutCoverage.toFixed(2),\r\n            estimatedCost: estimatedCost.toFixed(2)\r\n        });\r\n\r\n        this.updateBoxCount();\r\n    }\r\n\r\n    calculateGroutCoverage(roomL, roomW, tileL, tileW, groutMM) {\r\n        // Convert grout width from mm to inches\r\n        const groutInches = groutMM / 25.4;\r\n\r\n        // Calculate approximate grout coverage\r\n        // This is a simplified calculation\r\n        const tilesPerRow = Math.ceil((roomL * 12) / (tileL + groutInches));\r\n        const tilesPerColumn = Math.ceil((roomW * 12) / (tileW + groutInches));\r\n\r\n        const horizontalGroutArea = tilesPerColumn * (roomL * 12) * groutInches;\r\n        const verticalGroutArea = tilesPerRow * (roomW * 12) * groutInches;\r\n\r\n        // Convert back to square feet\r\n        return (horizontalGroutArea + verticalGroutArea) / 144;\r\n    }\r\n\r\n    updateResults(results) {\r\n        this.setResultValue('room-area', results.roomArea, 'integer');\r\n        this.setResultValue('tiles-needed', results.baseTiles, 'integer');\r\n        this.setResultValue('tiles-with-waste', results.tilesWithWaste, 'integer');\r\n        this.setResultValue('grout-coverage', results.groutCoverage, 'integer');\r\n        this.setResultValue('estimated-cost', results.estimatedCost, 'currency');\r\n\r\n        // Store for box calculation\r\n        this.currentTilesNeeded = results.tilesWithWaste;\r\n    }\r\n\r\n    updateBoxCount() {\r\n        const tilesPerBox = parseInt(this.tilesPerBox.value) || 0;\r\n        const boxCountElement = document.getElementById('box-count');\r\n\r\n        if (tilesPerBox > 0 && this.currentTilesNeeded) {\r\n            const boxesNeeded = Math.ceil(this.currentTilesNeeded / tilesPerBox);\r\n            boxCountElement.textContent = `${boxesNeeded} boxes`;\r\n        } else {\r\n            boxCountElement.textContent = '0 boxes';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.tilePrice, this.tilesPerBox].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.wasteFactor.value = '10';\r\n        this.groutWidth.value = '3';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('tiles-needed').textContent = '0 tiles';\r\n        document.getElementById('tiles-with-waste').textContent = '0 tiles';\r\n        document.getElementById('grout-coverage').textContent = '0 sq ft';\r\n        document.getElementById('estimated-cost').textContent = '$0.00';\r\n        document.getElementById('box-count').textContent = '0 boxes';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        // You could implement a toast notification or modal here\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Common tile sizes for quick reference\r\nconst commonTileSizes = {\r\n    '12x12': { length: 12, width: 12, name: '12\" × 12\" Standard' },\r\n    '12x24': { length: 12, width: 24, name: '12\" × 24\" Plank' },\r\n    '6x24': { length: 6, width: 24, name: '6\" × 24\" Wood-look' },\r\n    '18x18': { length: 18, width: 18, name: '18\" × 18\" Large Format' },\r\n    '24x24': { length: 24, width: 24, name: '24\" × 24\" Extra Large' },\r\n    '4x4': { length: 4, width: 4, name: '4\" × 4\" Small' },\r\n    '6x6': { length: 6, width: 6, name: '6\" × 6\" Medium' },\r\n    '8x8': { length: 8, width: 8, name: '8\" × 8\" Traditional' }\r\n};\r\n\r\n// Waste factor recommendations\r\nconst wasteFactorGuide = {\r\n    'straight': { min: 10, max: 15, description: 'Straight/Grid Pattern' },\r\n    'diagonal': { min: 15, max: 20, description: 'Diagonal Pattern' },\r\n    'herringbone': { min: 15, max: 25, description: 'Herringbone Pattern' },\r\n    'complex': { min: 20, max: 30, description: 'Complex Patterns' },\r\n    'irregular': { min: 15, max: 25, description: 'Irregular Rooms' }\r\n};\r\n\r\n// Utility functions\r\nfunction getTileRecommendation(roomArea) {\r\n    if (roomArea < 50) {\r\n        return 'Consider 12\"×12\" or smaller tiles for better proportions';\r\n    } else if (roomArea < 150) {\r\n        return '12\"×12\" or 12\"×24\" tiles work well for this size room';\r\n    } else if (roomArea < 300) {\r\n        return '12\"×24\" or 18\"×18\" tiles are ideal for larger spaces';\r\n    } else {\r\n        return '18\"×18\" or 24\"×24\" large format tiles for expansive areas';\r\n    }\r\n}\r\n\r\nfunction calculateGroutBags(groutCoverage, groutType = 'sanded') {\r\n    // Standard grout coverage: 25 lb bag covers ~150-200 sq ft\r\n    const coveragePerBag = groutType === 'sanded' ? 175 : 200;\r\n    return Math.ceil(groutCoverage / coveragePerBag);\r\n}\r\n\r\nfunction estimateInstallationTime(tilesNeeded, complexity = 'medium') {\r\n    const tilesPerHour = {\r\n        'easy': 15,    // Large tiles, straight pattern\r\n        'medium': 12,  // Standard tiles, basic pattern\r\n        'hard': 8      // Small tiles or complex pattern\r\n    };\r\n\r\n    const hoursNeeded = tilesNeeded / tilesPerHour[complexity];\r\n    return Math.ceil(hoursNeeded);\r\n}\r\n\r\n// Initialize calculator when page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new TileCalculator();\r\n        console.log('Tile Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Tile Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\n// Initialize the calculator when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new TileCalculator();\r\n    } catch (error) {\r\n        console.error('Failed to initialize Tile Calculator:', error);\r\n    }\r\n});\r\n"],"names":["TileCalculator","constructor","this","roomLength","document","getElementById","roomWidth","tileLength","tileWidth","wasteFactor","tilePrice","groutWidth","tilesPerBox","setupPresetButtons","setupTileSpecificListeners","getInputValue","id","defaultValue","input","parseFloat","value","setResultValue","format","element","formattedValue","toFixed","Math","round","textContent","showLoading","calculateBtn","innerHTML","disabled","hideLoading","showError","message","console","error","getCalculateButtonText","forEach","addEventListener","handleCalculate","updateBoxCount","querySelectorAll","btn","size","dataset","length","width","split","calculate","roomL","roomW","tileL","tileW","waste","price","grout","roomArea","tileAreaSqFt","baseTiles","ceil","tilesWithWaste","groutCoverage","calculateGroutCoverage","estimatedCost","updateResults","groutMM","groutInches","tilesPerRow","results","currentTilesNeeded","parseInt","boxCountElement","boxesNeeded","clear","focus","log","errorDiv","createElement","className","main","querySelector","insertBefore","firstChild"],"mappings":"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"}