{"version":3,"file":"subfloor-legacy-DzXg9Fmk.js","sources":["../../subfloor-calculator.js"],"sourcesContent":["// Subfloor Calculator JavaScript\r\n\r\nclass SubfloorCalculator {\r\n    constructor() {\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.materialType = document.getElementById('material-type');\r\n        this.materialThickness = document.getElementById('material-thickness');\r\n        this.sheetSize = document.getElementById('sheet-size');\r\n        this.sheetPrice = document.getElementById('sheet-price');\r\n        this.joistSpacing = document.getElementById('joist-spacing');\r\n        this.fastenerType = document.getElementById('fastener-type');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.fastenerPrice = document.getElementById('fastener-price');\r\n        this.underlaymentType = document.getElementById('underlayment-type');\r\n        this.underlaymentPrice = document.getElementById('underlayment-price');\r\n        this.laborCost = document.getElementById('labor-cost');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.materialType, this.materialThickness,\r\n         this.sheetSize, this.sheetPrice, this.joistSpacing, this.fastenerType,\r\n         this.wasteFactor, this.fastenerPrice, this.underlaymentType,\r\n         this.underlaymentPrice, this.laborCost].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = parseFloat(this.roomLength.value) || 0;\r\n        const roomW = parseFloat(this.roomWidth.value) || 0;\r\n        const sheetSize = this.getSheetDimensions();\r\n        const sheetPriceEach = parseFloat(this.sheetPrice.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const fastenerCost = parseFloat(this.fastenerPrice.value) || 0;\r\n        const underlaymentCostPerSqFt = parseFloat(this.underlaymentPrice.value) || 0;\r\n        const laborPerSqFt = parseFloat(this.laborCost.value) || 0;\r\n\r\n        if (roomL <= 0 || roomW <= 0) {\r\n            this.showError('Please enter valid room dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area\r\n        const roomAreaSqFt = roomL * roomW;\r\n\r\n        // Calculate sheets needed\r\n        const sheetAreaSqFt = sheetSize.width * sheetSize.length;\r\n        const baseSheetsNeeded = Math.ceil(roomAreaSqFt / sheetAreaSqFt);\r\n        const sheetsWithWaste = Math.ceil(baseSheetsNeeded * (1 + waste / 100));\r\n\r\n        // Calculate fasteners needed\r\n        const fasteners = this.calculateFasteners(roomAreaSqFt);\r\n\r\n        // Calculate adhesive tubes (if using glue + screws)\r\n        const adhesiveTubes = this.fastenerType.value === 'glue-screws' ?\r\n            Math.ceil(roomAreaSqFt / 300) : 0; // 1 tube per 300 sq ft\r\n\r\n        // Calculate costs\r\n        const materialCost = sheetsWithWaste * sheetPriceEach;\r\n        const underlaymentTotal = this.underlaymentType.value !== 'none' ?\r\n            roomAreaSqFt * underlaymentCostPerSqFt : 0;\r\n        const laborTotal = roomAreaSqFt * laborPerSqFt;\r\n        const totalCost = materialCost + fastenerCost + underlaymentTotal + laborTotal;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomAreaSqFt: roomAreaSqFt.toFixed(1),\r\n            baseSheetsNeeded: baseSheetsNeeded,\r\n            sheetsWithWaste: sheetsWithWaste,\r\n            fastenersNeeded: fasteners,\r\n            adhesiveTubes: adhesiveTubes,\r\n            materialCost: materialCost.toFixed(2),\r\n            fastenerCost: fastenerCost.toFixed(2),\r\n            underlaymentTotal: underlaymentTotal.toFixed(2),\r\n            laborTotal: laborTotal.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    getSheetDimensions() {\r\n        const sizeMap = {\r\n            '4x8': { width: 4, length: 8 },\r\n            '4x10': { width: 4, length: 10 },\r\n            '4x12': { width: 4, length: 12 }\r\n        };\r\n        return sizeMap[this.sheetSize.value] || { width: 4, length: 8 };\r\n    }\r\n\r\n    calculateFasteners(areaSquareFeet) {\r\n        const joistSpacing = parseFloat(this.joistSpacing.value) || 16;\r\n        const thickness = parseFloat(this.materialThickness.value) || 0.75;\r\n\r\n        // Calculate fasteners based on standard spacing\r\n        // 6\" on perimeter, 8-12\" in field depending on thickness\r\n        const perimeterSpacing = 6; // inches\r\n        const fieldSpacing = thickness >= 0.75 ? 12 : 8; // inches\r\n\r\n        // Estimate based on room area (simplified calculation)\r\n        // More accurate would require actual room dimensions and layout\r\n        const approximateFasteners = Math.ceil(areaSquareFeet * 1.5); // Rough estimate\r\n\r\n        return approximateFasteners;\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('room-area').textContent = `${results.roomAreaSqFt} sq ft`;\r\n        document.getElementById('sheets-needed').textContent = `${results.baseSheetsNeeded} sheets`;\r\n        document.getElementById('sheets-with-waste').textContent = `${results.sheetsWithWaste} sheets`;\r\n        document.getElementById('fasteners-needed').textContent = results.fastenersNeeded;\r\n        document.getElementById('adhesive-tubes').textContent = `${results.adhesiveTubes} tubes`;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if any costs are entered\r\n        if (parseFloat(results.materialCost) > 0 || parseFloat(results.laborTotal) > 0) {\r\n            document.getElementById('material-cost').textContent = `$${results.materialCost}`;\r\n            document.getElementById('fastener-cost-total').textContent = `$${results.fastenerCost}`;\r\n            document.getElementById('underlayment-total').textContent = `$${results.underlaymentTotal}`;\r\n            document.getElementById('labor-total').textContent = `$${results.laborTotal}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomLength, this.roomWidth, this.sheetPrice, this.fastenerPrice,\r\n         this.underlaymentPrice, this.laborCost].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.materialType.value = 'plywood';\r\n        this.materialThickness.value = '0.75';\r\n        this.sheetSize.value = '4x8';\r\n        this.joistSpacing.value = '16';\r\n        this.fastenerType.value = 'screws';\r\n        this.wasteFactor.value = '10';\r\n        this.underlaymentType.value = 'foam';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('sheets-needed').textContent = '0 sheets';\r\n        document.getElementById('sheets-with-waste').textContent = '0 sheets';\r\n        document.getElementById('fasteners-needed').textContent = '0';\r\n        document.getElementById('adhesive-tubes').textContent = '0 tubes';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Subfloor material pricing guide (national averages)\r\nconst subfloorPricing = {\r\n    'plywood': {\r\n        '0.5': { price: 35, description: '½\" CDX Plywood' },\r\n        '0.625': { price: 42, description: '⅝\" CDX Plywood' },\r\n        '0.75': { price: 48, description: '¾\" CDX Plywood' },\r\n        '1.125': { price: 65, description: '1⅛\" CDX Plywood' }\r\n    },\r\n    'osb': {\r\n        '0.5': { price: 25, description: '½\" OSB' },\r\n        '0.625': { price: 30, description: '⅝\" OSB' },\r\n        '0.75': { price: 35, description: '¾\" OSB' },\r\n        '1.125': { price: 48, description: '1⅛\" OSB' }\r\n    },\r\n    'advantech': {\r\n        '0.625': { price: 55, description: '⅝\" AdvanTech' },\r\n        '0.75': { price: 62, description: '¾\" AdvanTech' },\r\n        '1.125': { price: 78, description: '1⅛\" AdvanTech' }\r\n    }\r\n};\r\n\r\n// Fastener requirements by material thickness\r\nconst fastenerRequirements = {\r\n    '0.5': {\r\n        screws: { length: '1.25', quantity: 1.2 },\r\n        nails: { length: '1.5', quantity: 1.5 }\r\n    },\r\n    '0.625': {\r\n        screws: { length: '1.25', quantity: 1.3 },\r\n        nails: { length: '1.75', quantity: 1.6 }\r\n    },\r\n    '0.75': {\r\n        screws: { length: '1.5', quantity: 1.4 },\r\n        nails: { length: '2', quantity: 1.7 }\r\n    },\r\n    '1.125': {\r\n        screws: { length: '2', quantity: 1.6 },\r\n        nails: { length: '2.5', quantity: 2.0 }\r\n    }\r\n};\r\n\r\n// Underlayment options and coverage\r\nconst underlaymentOptions = {\r\n    'foam': {\r\n        coverage: 100, // sq ft per roll\r\n        cost_range: { min: 0.35, max: 0.65 },\r\n        description: 'Basic foam padding'\r\n    },\r\n    'cork': {\r\n        coverage: 200,\r\n        cost_range: { min: 1.20, max: 2.50 },\r\n        description: 'Natural cork underlayment'\r\n    },\r\n    'rubber': {\r\n        coverage: 100,\r\n        cost_range: { min: 0.80, max: 1.50 },\r\n        description: 'Recycled rubber padding'\r\n    },\r\n    'felt': {\r\n        coverage: 500,\r\n        cost_range: { min: 0.15, max: 0.35 },\r\n        description: 'Felt paper moisture barrier'\r\n    }\r\n};\r\n\r\n// Joist spacing requirements\r\nconst joistSpacingRequirements = {\r\n    '12': { min_thickness: 0.5, recommended: 0.625 },\r\n    '16': { min_thickness: 0.625, recommended: 0.75 },\r\n    '19.2': { min_thickness: 0.75, recommended: 1.125 },\r\n    '24': { min_thickness: 1.125, recommended: 1.125 }\r\n};\r\n\r\n// Utility functions\r\nfunction validateThicknessForSpacing(thickness, spacing) {\r\n    const requirements = joistSpacingRequirements[spacing.toString()];\r\n    if (!requirements) return true;\r\n\r\n    return thickness >= requirements.min_thickness;\r\n}\r\n\r\nfunction calculateDeflection(thickness, spacing, load = 40) {\r\n    // Simplified deflection calculation (PSF loading)\r\n    // Real calculation would need material properties\r\n    const span = spacing / 12; // Convert to feet\r\n    const momentOfInertia = Math.pow(thickness, 3) / 12;\r\n\r\n    // This is a simplified approximation\r\n    return (5 * load * Math.pow(span, 4)) / (384 * 1600000 * momentOfInertia);\r\n}\r\n\r\nfunction estimateInstallationTime(squareFeet, complexity = 'normal') {\r\n    const baseRate = {\r\n        'simple': 25, // sq ft per hour\r\n        'normal': 20,\r\n        'complex': 15\r\n    };\r\n\r\n    return Math.ceil(squareFeet / (baseRate[complexity] || 20));\r\n}\r\n\r\nfunction calculateAdhesiveNeeded(squareFeet) {\r\n    // Construction adhesive coverage: ~300 sq ft per 28oz tube\r\n    return Math.ceil(squareFeet / 300);\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new SubfloorCalculator();\r\n    console.log('Subfloor Calculator initialized');\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = SubfloorCalculator;\r\n}\r\n"],"names":["SubfloorCalculator","constructor","this","roomLength","document","getElementById","roomWidth","materialType","materialThickness","sheetSize","sheetPrice","joistSpacing","fastenerType","wasteFactor","fastenerPrice","underlaymentType","underlaymentPrice","laborCost","calculateBtn","clearBtn","initializeEventListeners","addEventListener","calculate","clear","forEach","input","roomL","parseFloat","value","roomW","getSheetDimensions","sheetPriceEach","waste","fastenerCost","underlaymentCostPerSqFt","laborPerSqFt","showError","roomAreaSqFt","sheetAreaSqFt","width","length","baseSheetsNeeded","Math","ceil","sheetsWithWaste","fasteners","calculateFasteners","adhesiveTubes","materialCost","underlaymentTotal","laborTotal","totalCost","updateResults","toFixed","fastenersNeeded","areaSquareFeet","results","textContent","style","display","focus","message","console","error","log","module","exports"],"mappings":"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"}