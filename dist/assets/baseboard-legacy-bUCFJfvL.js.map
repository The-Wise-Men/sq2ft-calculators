{"version":3,"file":"baseboard-legacy-bUCFJfvL.js","sources":["../../baseboard-calculator.js"],"sourcesContent":["// Baseboard & Trim Calculator JavaScript\r\n\r\nclass BaseboardCalculator {\r\n    constructor() {\r\n        this.roomPerimeter = document.getElementById('room-perimeter');\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.doorWidth = document.getElementById('door-width');\r\n        this.windowWidth = document.getElementById('window-width');\r\n        this.otherOpenings = document.getElementById('other-openings');\r\n        this.corners = document.getElementById('corners');\r\n        this.trimType = document.getElementById('trim-type');\r\n        this.trimLength = document.getElementById('trim-length');\r\n        this.pricePerFoot = document.getElementById('price-per-foot');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.nailsScrews = document.getElementById('nails-screws');\r\n        this.caulkCost = document.getElementById('caulk-cost');\r\n        this.paintPrimer = document.getElementById('paint-primer');\r\n        this.laborCost = document.getElementById('labor-cost');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Auto-calculate perimeter from dimensions\r\n        [this.roomLength, this.roomWidth].forEach(input => {\r\n            input.addEventListener('input', () => {\r\n                this.updatePerimeter();\r\n                this.calculate();\r\n            });\r\n        });\r\n\r\n        // Real-time calculation on other inputs\r\n        [this.roomPerimeter, this.doorWidth, this.windowWidth, this.otherOpenings,\r\n         this.corners, this.trimType, this.trimLength, this.pricePerFoot,\r\n         this.wasteFactor, this.nailsScrews, this.caulkCost, this.paintPrimer,\r\n         this.laborCost].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n\r\n        // Update waste factor based on trim type\r\n        this.trimType.addEventListener('change', () => {\r\n            this.updateWasteFactorForTrimType();\r\n            this.calculate();\r\n        });\r\n    }\r\n\r\n    updatePerimeter() {\r\n        const length = parseFloat(this.roomLength.value) || 0;\r\n        const width = parseFloat(this.roomWidth.value) || 0;\r\n\r\n        if (length > 0 && width > 0) {\r\n            const perimeter = 2 * (length + width);\r\n            this.roomPerimeter.value = perimeter.toFixed(1);\r\n        }\r\n    }\r\n\r\n    updateWasteFactorForTrimType() {\r\n        const trimType = this.trimType.value;\r\n        const wasteFactors = {\r\n            'baseboard': 10,\r\n            'crown': 18,\r\n            'chair-rail': 12,\r\n            'quarter-round': 15,\r\n            'shoe-molding': 15,\r\n            'casing': 20\r\n        };\r\n\r\n        if (wasteFactors[trimType]) {\r\n            this.wasteFactor.value = wasteFactors[trimType];\r\n        }\r\n    }\r\n\r\n    calculate() {\r\n        const perimeter = parseFloat(this.roomPerimeter.value) || 0;\r\n        const doorW = parseFloat(this.doorWidth.value) || 0;\r\n        const windowW = parseFloat(this.windowWidth.value) || 0;\r\n        const otherW = parseFloat(this.otherOpenings.value) || 0;\r\n        const numCorners = parseInt(this.corners.value) || 0;\r\n        const trimLen = parseFloat(this.trimLength.value) || 12;\r\n        const pricePerFt = parseFloat(this.pricePerFoot.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const nailsCost = parseFloat(this.nailsScrews.value) || 0;\r\n        const caulkCostTotal = parseFloat(this.caulkCost.value) || 0;\r\n        const paintCost = parseFloat(this.paintPrimer.value) || 0;\r\n        const laborPerFt = parseFloat(this.laborCost.value) || 0;\r\n\r\n        if (perimeter <= 0) {\r\n            this.showError('Please enter room perimeter or dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate net linear feet needed\r\n        const totalOpenings = doorW + windowW + otherW;\r\n        const netLinearFeet = Math.max(0, perimeter - totalOpenings);\r\n\r\n        // Add waste factor\r\n        const linearFeetWithWaste = netLinearFeet * (1 + waste / 100);\r\n\r\n        // Calculate pieces needed\r\n        const piecesNeeded = Math.ceil(linearFeetWithWaste / trimLen);\r\n\r\n        // Calculate cuts\r\n        const cuts = this.calculateCuts(numCorners, this.trimType.value);\r\n\r\n        // Calculate costs\r\n        const trimCost = linearFeetWithWaste * pricePerFt;\r\n        const laborTotal = netLinearFeet * laborPerFt;\r\n        const totalCost = trimCost + nailsCost + caulkCostTotal + paintCost + laborTotal;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            netLinearFeet: netLinearFeet.toFixed(1),\r\n            linearFeetWithWaste: linearFeetWithWaste.toFixed(1),\r\n            piecesNeeded: piecesNeeded,\r\n            cornerCuts: cuts.cornerCuts,\r\n            miterCuts: cuts.miterCuts,\r\n            trimCost: trimCost.toFixed(2),\r\n            nailsCost: nailsCost.toFixed(2),\r\n            caulkCostTotal: caulkCostTotal.toFixed(2),\r\n            paintCost: paintCost.toFixed(2),\r\n            laborTotal: laborTotal.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    calculateCuts(corners, trimType) {\r\n        let cornerCuts = 0;\r\n        let miterCuts = 0;\r\n\r\n        if (corners > 0) {\r\n            if (trimType === 'crown') {\r\n                // Crown molding requires compound miter cuts\r\n                cornerCuts = corners;\r\n                miterCuts = corners * 2; // Two cuts per corner\r\n            } else {\r\n                // Regular trim\r\n                cornerCuts = corners;\r\n                miterCuts = Math.floor(corners * 1.5); // Mix of coped and mitered\r\n            }\r\n        }\r\n\r\n        return { cornerCuts, miterCuts };\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('linear-feet-needed').textContent = `${results.netLinearFeet} ft`;\r\n        document.getElementById('linear-feet-waste').textContent = `${results.linearFeetWithWaste} ft`;\r\n        document.getElementById('pieces-needed').textContent = `${results.piecesNeeded} pieces`;\r\n        document.getElementById('corner-cuts').textContent = results.cornerCuts;\r\n        document.getElementById('miter-cuts').textContent = results.miterCuts;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if any costs are entered\r\n        if (parseFloat(results.trimCost) > 0 || parseFloat(results.laborTotal) > 0) {\r\n            document.getElementById('trim-cost').textContent = `$${results.trimCost}`;\r\n            document.getElementById('fastener-cost').textContent = `$${results.nailsCost}`;\r\n            document.getElementById('caulk-total').textContent = `$${results.caulkCostTotal}`;\r\n            document.getElementById('paint-total').textContent = `$${results.paintCost}`;\r\n            document.getElementById('labor-total').textContent = `$${results.laborTotal}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomPerimeter, this.roomLength, this.roomWidth, this.pricePerFoot,\r\n         this.nailsScrews, this.caulkCost, this.paintPrimer, this.laborCost].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.doorWidth.value = '6';\r\n        this.windowWidth.value = '0';\r\n        this.otherOpenings.value = '0';\r\n        this.corners.value = '4';\r\n        this.trimType.value = 'baseboard';\r\n        this.trimLength.value = '12';\r\n        this.wasteFactor.value = '10';\r\n\r\n        // Clear results\r\n        document.getElementById('linear-feet-needed').textContent = '0 ft';\r\n        document.getElementById('linear-feet-waste').textContent = '0 ft';\r\n        document.getElementById('pieces-needed').textContent = '0 pieces';\r\n        document.getElementById('corner-cuts').textContent = '0 cuts';\r\n        document.getElementById('miter-cuts').textContent = '0 cuts';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomPerimeter.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Trim pricing guide (national averages per linear foot)\r\nconst trimPricing = {\r\n    'pine': { min: 1.50, max: 3.50, description: 'Pine - Budget friendly' },\r\n    'poplar': { min: 2.00, max: 4.50, description: 'Poplar - Paint grade' },\r\n    'oak': { min: 3.50, max: 8.00, description: 'Oak - Traditional stain grade' },\r\n    'maple': { min: 4.00, max: 9.00, description: 'Maple - Smooth finish' },\r\n    'cherry': { min: 6.00, max: 12.00, description: 'Cherry - Premium hardwood' },\r\n    'mdf': { min: 1.00, max: 2.50, description: 'MDF - Smooth paint finish' }\r\n};\r\n\r\n// Standard trim profiles\r\nconst trimProfiles = {\r\n    'baseboard': {\r\n        'colonial': { height: '3.5\"', complexity: 'simple' },\r\n        'craftsman': { height: '5.25\"', complexity: 'moderate' },\r\n        'modern': { height: '4.5\"', complexity: 'simple' },\r\n        'traditional': { height: '6\"', complexity: 'complex' }\r\n    },\r\n    'crown': {\r\n        'simple': { projection: '3\"', complexity: 'moderate' },\r\n        'traditional': { projection: '4.5\"', complexity: 'complex' },\r\n        'elaborate': { projection: '6\"', complexity: 'very complex' }\r\n    }\r\n};\r\n\r\n// Installation difficulty factors\r\nconst installationDifficulty = {\r\n    'baseboard': { skill: 'beginner', time_per_foot: 0.1 }, // hours\r\n    'crown': { skill: 'advanced', time_per_foot: 0.3 },\r\n    'chair-rail': { skill: 'intermediate', time_per_foot: 0.15 },\r\n    'quarter-round': { skill: 'beginner', time_per_foot: 0.08 },\r\n    'casing': { skill: 'intermediate', time_per_foot: 0.2 }\r\n};\r\n\r\n// Tool requirements by trim type\r\nconst toolRequirements = {\r\n    'basic': ['miter saw', 'nail gun', 'measuring tape', 'level', 'coping saw'],\r\n    'advanced': ['compound miter saw', 'pneumatic nailer', 'laser level', 'router', 'biscuit joiner'],\r\n    'crown_molding': ['compound miter saw', 'crown stops', 'pneumatic nailer', 'coping saw', 'angle finder']\r\n};\r\n\r\n// Utility functions\r\nfunction estimateInstallationTime(linearFeet, trimType, skillLevel = 'intermediate') {\r\n    const baseTime = installationDifficulty[trimType]?.time_per_foot || 0.15;\r\n    const skillMultiplier = {\r\n        'beginner': 2.0,\r\n        'intermediate': 1.0,\r\n        'advanced': 0.7,\r\n        'professional': 0.5\r\n    };\r\n\r\n    return linearFeet * baseTime * (skillMultiplier[skillLevel] || 1.0);\r\n}\r\n\r\nfunction calculateNailsNeeded(linearFeet, spacing = 16) {\r\n    // Spacing in inches, typically 16\" on center\r\n    const nailsPerFoot = 12 / spacing;\r\n    return Math.ceil(linearFeet * nailsPerFoot * 1.1); // 10% extra\r\n}\r\n\r\nfunction calculateCaulkTubes(linearFeet, gapSize = 'normal') {\r\n    const coveragePerTube = {\r\n        'small': 100, // linear feet\r\n        'normal': 75,\r\n        'large': 50\r\n    };\r\n\r\n    return Math.ceil(linearFeet / (coveragePerTube[gapSize] || 75));\r\n}\r\n\r\nfunction calculatePaintNeeded(linearFeet, trimHeight, coats = 2) {\r\n    // Convert height from inches to feet\r\n    const heightFt = trimHeight / 12;\r\n    const surfaceArea = linearFeet * heightFt * 2; // Both sides\r\n    const coverage = 350; // sq ft per gallon\r\n\r\n    return Math.ceil((surfaceArea * coats) / coverage * 4) / 4; // Round to nearest quart\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new BaseboardCalculator();\r\n        console.log('Baseboard Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Baseboard Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = BaseboardCalculator;\r\n}\r\n"],"names":["BaseboardCalculator","constructor","this","roomPerimeter","document","getElementById","roomLength","roomWidth","doorWidth","windowWidth","otherOpenings","corners","trimType","trimLength","pricePerFoot","wasteFactor","nailsScrews","caulkCost","paintPrimer","laborCost","calculateBtn","clearBtn","initializeEventListeners","addEventListener","calculate","clear","forEach","input","updatePerimeter","updateWasteFactorForTrimType","length","parseFloat","value","width","perimeter","toFixed","wasteFactors","baseboard","crown","casing","doorW","windowW","otherW","numCorners","parseInt","trimLen","pricePerFt","waste","nailsCost","caulkCostTotal","paintCost","laborPerFt","showError","totalOpenings","netLinearFeet","Math","max","linearFeetWithWaste","piecesNeeded","ceil","cuts","calculateCuts","trimCost","laborTotal","totalCost","updateResults","cornerCuts","miterCuts","floor","results","textContent","style","display","focus","message","console","error","log","errorDiv","createElement","className","innerHTML","main","querySelector","insertBefore","firstChild","module","exports"],"mappings":"oHAEA,MAAMA,EACFC,WAAAA,GACIC,KAAKC,cAAgBC,SAASC,eAAe,kBAC7CH,KAAKI,WAAaF,SAASC,eAAe,eAC1CH,KAAKK,UAAYH,SAASC,eAAe,cACzCH,KAAKM,UAAYJ,SAASC,eAAe,cACzCH,KAAKO,YAAcL,SAASC,eAAe,gBAC3CH,KAAKQ,cAAgBN,SAASC,eAAe,kBAC7CH,KAAKS,QAAUP,SAASC,eAAe,WACvCH,KAAKU,SAAWR,SAASC,eAAe,aACxCH,KAAKW,WAAaT,SAASC,eAAe,eAC1CH,KAAKY,aAAeV,SAASC,eAAe,kBAC5CH,KAAKa,YAAcX,SAASC,eAAe,gBAC3CH,KAAKc,YAAcZ,SAASC,eAAe,gBAC3CH,KAAKe,UAAYb,SAASC,eAAe,cACzCH,KAAKgB,YAAcd,SAASC,eAAe,gBAC3CH,KAAKiB,UAAYf,SAASC,eAAe,cAEzCH,KAAKkB,aAAehB,SAASC,eAAe,iBAC5CH,KAAKmB,SAAWjB,SAASC,eAAe,aAExCH,KAAKoB,0BACT,CAEAA,wBAAAA,GACIpB,KAAKkB,aAAaG,iBAAiB,QAAS,IAAMrB,KAAKsB,aACvDtB,KAAKmB,SAASE,iBAAiB,QAAS,IAAMrB,KAAKuB,SAGnD,CAACvB,KAAKI,WAAYJ,KAAKK,WAAWmB,QAAQC,IACtCA,EAAMJ,iBAAiB,QAAS,KAC5BrB,KAAK0B,kBACL1B,KAAKsB,gBAKb,CAACtB,KAAKC,cAAeD,KAAKM,UAAWN,KAAKO,YAAaP,KAAKQ,cAC3DR,KAAKS,QAAST,KAAKU,SAAUV,KAAKW,WAAYX,KAAKY,aACnDZ,KAAKa,YAAab,KAAKc,YAAad,KAAKe,UAAWf,KAAKgB,YACzDhB,KAAKiB,WAAWO,QAAQC,IACrBA,EAAMJ,iBAAiB,QAAS,IAAMrB,KAAKsB,aAC3CG,EAAMJ,iBAAiB,SAAU,IAAMrB,KAAKsB,eAIhDtB,KAAKU,SAASW,iBAAiB,SAAU,KACrCrB,KAAK2B,+BACL3B,KAAKsB,aAEb,CAEAI,eAAAA,GACI,MAAME,EAASC,WAAW7B,KAAKI,WAAW0B,QAAU,EAC9CC,EAAQF,WAAW7B,KAAKK,UAAUyB,QAAU,EAElD,GAAIF,EAAS,GAAKG,EAAQ,EAAG,CACzB,MAAMC,EAAY,GAAKJ,EAASG,GAChC/B,KAAKC,cAAc6B,MAAQE,EAAUC,QAAQ,EACjD,CACJ,CAEAN,4BAAAA,GACI,MAAMjB,EAAWV,KAAKU,SAASoB,MACzBI,EAAe,CACjBC,UAAa,GACbC,MAAS,GACT,aAAc,GACd,gBAAiB,GACjB,eAAgB,GAChBC,OAAU,IAGVH,EAAaxB,KACbV,KAAKa,YAAYiB,MAAQI,EAAaxB,GAE9C,CAEAY,SAAAA,GACI,MAAMU,EAAYH,WAAW7B,KAAKC,cAAc6B,QAAU,EACpDQ,EAAQT,WAAW7B,KAAKM,UAAUwB,QAAU,EAC5CS,EAAUV,WAAW7B,KAAKO,YAAYuB,QAAU,EAChDU,EAASX,WAAW7B,KAAKQ,cAAcsB,QAAU,EACjDW,EAAaC,SAAS1C,KAAKS,QAAQqB,QAAU,EAC7Ca,EAAUd,WAAW7B,KAAKW,WAAWmB,QAAU,GAC/Cc,EAAaf,WAAW7B,KAAKY,aAAakB,QAAU,EACpDe,EAAQhB,WAAW7B,KAAKa,YAAYiB,QAAU,GAC9CgB,EAAYjB,WAAW7B,KAAKc,YAAYgB,QAAU,EAClDiB,EAAiBlB,WAAW7B,KAAKe,UAAUe,QAAU,EACrDkB,EAAYnB,WAAW7B,KAAKgB,YAAYc,QAAU,EAClDmB,EAAapB,WAAW7B,KAAKiB,UAAUa,QAAU,EAEvD,GAAIE,GAAa,EAEb,YADAhC,KAAKkD,UAAU,6CAKnB,MAAMC,EAAgBb,EAAQC,EAAUC,EAClCY,EAAgBC,KAAKC,IAAI,EAAGtB,EAAYmB,GAGxCI,EAAsBH,GAAiB,EAAIP,EAAQ,KAGnDW,EAAeH,KAAKI,KAAKF,EAAsBZ,GAG/Ce,EAAO1D,KAAK2D,cAAclB,EAAYzC,KAAKU,SAASoB,OAGpD8B,EAAWL,EAAsBX,EACjCiB,EAAaT,EAAgBH,EAC7Ba,EAAYF,EAAWd,EAAYC,EAAiBC,EAAYa,EAGtE7D,KAAK+D,cAAc,CACfX,cAAeA,EAAcnB,QAAQ,GACrCsB,oBAAqBA,EAAoBtB,QAAQ,GACjDuB,aAAcA,EACdQ,WAAYN,EAAKM,WACjBC,UAAWP,EAAKO,UAChBL,SAAUA,EAAS3B,QAAQ,GAC3Ba,UAAWA,EAAUb,QAAQ,GAC7Bc,eAAgBA,EAAed,QAAQ,GACvCe,UAAWA,EAAUf,QAAQ,GAC7B4B,WAAYA,EAAW5B,QAAQ,GAC/B6B,UAAWA,EAAU7B,QAAQ,IAErC,CAEA0B,aAAAA,CAAclD,EAASC,GACnB,IAAIsD,EAAa,EACbC,EAAY,EAchB,OAZIxD,EAAU,IACO,UAAbC,GAEAsD,EAAavD,EACbwD,EAAsB,EAAVxD,IAGZuD,EAAavD,EACbwD,EAAYZ,KAAKa,MAAgB,IAAVzD,KAIxB,CAAEuD,aAAYC,YACzB,CAEAF,aAAAA,CAAcI,GACVjE,SAASC,eAAe,sBAAsBiE,YAAc,GAAGD,EAAQf,mBACvElD,SAASC,eAAe,qBAAqBiE,YAAc,GAAGD,EAAQZ,yBACtErD,SAASC,eAAe,iBAAiBiE,YAAc,GAAGD,EAAQX,sBAClEtD,SAASC,eAAe,eAAeiE,YAAcD,EAAQH,WAC7D9D,SAASC,eAAe,cAAciE,YAAcD,EAAQF,UAC5D/D,SAASC,eAAe,cAAciE,YAAc,IAAID,EAAQL,YAG5DjC,WAAWsC,EAAQP,UAAY,GAAK/B,WAAWsC,EAAQN,YAAc,GACrE3D,SAASC,eAAe,aAAaiE,YAAc,IAAID,EAAQP,WAC/D1D,SAASC,eAAe,iBAAiBiE,YAAc,IAAID,EAAQrB,YACnE5C,SAASC,eAAe,eAAeiE,YAAc,IAAID,EAAQpB,iBACjE7C,SAASC,eAAe,eAAeiE,YAAc,IAAID,EAAQnB,YACjE9C,SAASC,eAAe,eAAeiE,YAAc,IAAID,EAAQN,aACjE3D,SAASC,eAAe,kBAAkBkE,MAAMC,QAAU,SAE1DpE,SAASC,eAAe,kBAAkBkE,MAAMC,QAAU,MAElE,CAEA/C,KAAAA,GAEI,CAACvB,KAAKC,cAAeD,KAAKI,WAAYJ,KAAKK,UAAWL,KAAKY,aAC1DZ,KAAKc,YAAad,KAAKe,UAAWf,KAAKgB,YAAahB,KAAKiB,WAAWO,QAAQC,IACzEA,EAAMK,MAAQ,KAIlB9B,KAAKM,UAAUwB,MAAQ,IACvB9B,KAAKO,YAAYuB,MAAQ,IACzB9B,KAAKQ,cAAcsB,MAAQ,IAC3B9B,KAAKS,QAAQqB,MAAQ,IACrB9B,KAAKU,SAASoB,MAAQ,YACtB9B,KAAKW,WAAWmB,MAAQ,KACxB9B,KAAKa,YAAYiB,MAAQ,KAGzB5B,SAASC,eAAe,sBAAsBiE,YAAc,OAC5DlE,SAASC,eAAe,qBAAqBiE,YAAc,OAC3DlE,SAASC,eAAe,iBAAiBiE,YAAc,WACvDlE,SAASC,eAAe,eAAeiE,YAAc,SACrDlE,SAASC,eAAe,cAAciE,YAAc,SACpDlE,SAASC,eAAe,cAAciE,YAAc,QACpDlE,SAASC,eAAe,kBAAkBkE,MAAMC,QAAU,OAE1DtE,KAAKC,cAAcsE,OACvB,CAEArB,SAAAA,CAAUsB,GACNC,QAAQC,MAAMF,EAClB,EAmFJtE,SAASmB,iBAAiB,mBAAoB,KAC1C,IACI,IAAIvB,EACJ2E,QAAQE,IAAI,gDAChB,CAAE,MAAOD,GACLD,QAAQC,MAAM,6CAA8CA,GAE5D,MAAME,EAAW1E,SAAS2E,cAAc,OACxCD,EAASE,UAAY,gBACrBF,EAASG,UAAY,mFACrB,MAAMC,EAAO9E,SAAS+E,cAAc,QAChCD,GACAA,EAAKE,aAAaN,EAAUI,EAAKG,WAEzC,SAIkB,IAAXC,GAA0BA,EAAOC,UACxCD,EAAOC,QAAUvF"}