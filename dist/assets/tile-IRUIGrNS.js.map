{"version":3,"file":"tile-IRUIGrNS.js","sources":["../../calculator-base.js","../../tile-calculator.js"],"sourcesContent":["// Shared Calculator Base Class\r\n// Provides common functionality for all calculators\r\n\r\nclass CalculatorBase {\r\n    constructor(calculatorType, options = {}) {\r\n        this.type = calculatorType;\r\n        this.options = {\r\n            enableValidation: true,\r\n            enablePersistence: true,\r\n            enableLoadingStates: true,\r\n            ...options\r\n        };\r\n        \r\n        this.inputs = new Map();\r\n        this.results = new Map();\r\n        this.isLoading = false;\r\n        \r\n        this.initializeCommonElements();\r\n        this.setupValidation();\r\n        this.loadSavedData();\r\n    }\r\n\r\n    initializeCommonElements() {\r\n        // Common button elements\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n        \r\n        // Add common event listeners\r\n        this.setupCommonEventListeners();\r\n    }\r\n\r\n    setupCommonEventListeners() {\r\n        // Calculate button\r\n        if (this.calculateBtn) {\r\n            this.calculateBtn.addEventListener('click', () => this.handleCalculate());\r\n        }\r\n\r\n        // Clear button\r\n        if (this.clearBtn) {\r\n            this.clearBtn.addEventListener('click', () => this.handleClear());\r\n        }\r\n\r\n        // Enter key support\r\n        document.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter' && !this.isLoading) {\r\n                this.handleCalculate();\r\n            }\r\n        });\r\n    }\r\n\r\n    setupValidation() {\r\n        if (!this.options.enableValidation) return;\r\n        \r\n        // Add validation to all number inputs\r\n        document.querySelectorAll('input[type=\"number\"]').forEach(input => {\r\n            input.addEventListener('input', () => this.validateInput(input));\r\n            input.addEventListener('blur', () => this.validateInput(input));\r\n        });\r\n    }\r\n\r\n    validateInput(input) {\r\n        if (!this.options.enableValidation) return true;\r\n        \r\n        const value = parseFloat(input.value);\r\n        const min = parseFloat(input.getAttribute('min')) || 0;\r\n        const max = parseFloat(input.getAttribute('max')) || Infinity;\r\n        \r\n        return validateInput(input, {\r\n            min,\r\n            max,\r\n            required: input.hasAttribute('required'),\r\n            customMessage: input.getAttribute('data-error-message')\r\n        });\r\n    }\r\n\r\n    handleCalculate() {\r\n        if (this.isLoading) return;\r\n        \r\n        this.showLoading();\r\n        \r\n        // Use setTimeout to allow UI to update\r\n        setTimeout(() => {\r\n            try {\r\n                this.calculate();\r\n                this.saveData();\r\n            } catch (error) {\r\n                console.error(`Error in ${this.type} calculation:`, error);\r\n                this.showError('Calculation failed. Please check your inputs.');\r\n            } finally {\r\n                this.hideLoading();\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    handleClear() {\r\n        // Clear all inputs\r\n        document.querySelectorAll('input[type=\"number\"], input[type=\"text\"], select').forEach(input => {\r\n            input.value = '';\r\n            input.classList.remove('error', 'valid');\r\n        });\r\n\r\n        // Clear validation messages\r\n        document.querySelectorAll('.validation-message').forEach(msg => {\r\n            msg.remove();\r\n        });\r\n\r\n        // Clear results\r\n        this.clearResults();\r\n        \r\n        // Clear saved data\r\n        this.clearSavedData();\r\n        \r\n        // Focus first input\r\n        const firstInput = document.querySelector('input[type=\"number\"], input[type=\"text\"]');\r\n        if (firstInput) firstInput.focus();\r\n    }\r\n\r\n    showLoading() {\r\n        if (!this.options.enableLoadingStates) return;\r\n        \r\n        this.isLoading = true;\r\n        \r\n        if (this.calculateBtn) {\r\n            this.calculateBtn.disabled = true;\r\n            this.calculateBtn.innerHTML = '<i class=\"fa-solid fa-spinner fa-spin\"></i> Calculating...';\r\n        }\r\n    }\r\n\r\n    hideLoading() {\r\n        if (!this.options.enableLoadingStates) return;\r\n        \r\n        this.isLoading = false;\r\n        \r\n        if (this.calculateBtn) {\r\n            this.calculateBtn.disabled = false;\r\n            this.calculateBtn.innerHTML = this.getCalculateButtonText();\r\n        }\r\n    }\r\n\r\n    getCalculateButtonText() {\r\n        // Override in child classes for custom button text\r\n        return 'üìè Calculate';\r\n    }\r\n\r\n    showError(message) {\r\n        // Remove existing error messages\r\n        document.querySelectorAll('.error-message').forEach(msg => msg.remove());\r\n        \r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = `<p>‚ö†Ô∏è ${message}</p>`;\r\n        \r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n        \r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            if (errorDiv.parentNode) {\r\n                errorDiv.remove();\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    clearResults() {\r\n        // Override in child classes to clear specific results\r\n        document.querySelectorAll('.result-value').forEach(el => {\r\n            el.textContent = '0';\r\n        });\r\n    }\r\n\r\n    // Data persistence methods\r\n    saveData() {\r\n        if (!this.options.enablePersistence) return;\r\n        \r\n        const data = {};\r\n        document.querySelectorAll('input[type=\"number\"], input[type=\"text\"], select').forEach(input => {\r\n            if (input.value) {\r\n                data[input.id] = input.value;\r\n            }\r\n        });\r\n        \r\n        localStorage.setItem(`calculator_${this.type}`, JSON.stringify(data));\r\n    }\r\n\r\n    loadSavedData() {\r\n        if (!this.options.enablePersistence) return;\r\n        \r\n        try {\r\n            const saved = localStorage.getItem(`calculator_${this.type}`);\r\n            if (saved) {\r\n                const data = JSON.parse(saved);\r\n                Object.entries(data).forEach(([id, value]) => {\r\n                    const input = document.getElementById(id);\r\n                    if (input) {\r\n                        input.value = value;\r\n                    }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load saved data:', error);\r\n        }\r\n    }\r\n\r\n    clearSavedData() {\r\n        if (!this.options.enablePersistence) return;\r\n        localStorage.removeItem(`calculator_${this.type}`);\r\n    }\r\n\r\n    // Utility methods\r\n    getInputValue(id, defaultValue = 0) {\r\n        const input = document.getElementById(id);\r\n        return input ? parseFloat(input.value) || defaultValue : defaultValue;\r\n    }\r\n\r\n    setResultValue(id, value, format = 'number') {\r\n        const element = document.getElementById(id);\r\n        if (!element) return;\r\n        \r\n        switch (format) {\r\n            case 'currency':\r\n                element.textContent = `$${value.toFixed(2)}`;\r\n                break;\r\n            case 'percentage':\r\n                element.textContent = `${value.toFixed(1)}%`;\r\n                break;\r\n            case 'integer':\r\n                element.textContent = Math.round(value).toString();\r\n                break;\r\n            default:\r\n                element.textContent = value.toFixed(2);\r\n        }\r\n    }\r\n\r\n    // Abstract methods to be implemented by child classes\r\n    calculate() {\r\n        throw new Error('calculate() method must be implemented by child class');\r\n    }\r\n}\r\n\r\n// Export for use in other files\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = CalculatorBase;\r\n}\r\n","// Tile Calculator JavaScript\r\n\r\nclass TileCalculator extends CalculatorBase {\r\n    constructor() {\r\n        super('tile', {\r\n            enableValidation: true,\r\n            enablePersistence: true,\r\n            enableLoadingStates: true\r\n        });\r\n\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.tileLength = document.getElementById('tile-length');\r\n        this.tileWidth = document.getElementById('tile-width');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.tilePrice = document.getElementById('tile-price');\r\n        this.groutWidth = document.getElementById('grout-width');\r\n        this.tilesPerBox = document.getElementById('tiles-per-box');\r\n\r\n        this.setupPresetButtons();\r\n        this.setupTileSpecificListeners();\r\n    }\r\n\r\n    getCalculateButtonText() {\r\n        return 'üìè Calculate Tiles Needed';\r\n    }\r\n\r\n    setupTileSpecificListeners() {\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.wasteFactor, this.tilePrice, this.groutWidth].forEach(input => {\r\n            if (input) {\r\n                input.addEventListener('input', () => this.handleCalculate());\r\n            }\r\n        });\r\n\r\n        // Box calculation on tiles per box change\r\n        if (this.tilesPerBox) {\r\n            this.tilesPerBox.addEventListener('input', () => this.updateBoxCount());\r\n        }\r\n    }\r\n\r\n    setupPresetButtons() {\r\n        const presetButtons = document.querySelectorAll('.preset-btn');\r\n        presetButtons.forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const size = btn.dataset.size;\r\n                const [length, width] = size.split('x');\r\n                this.tileLength.value = length;\r\n                this.tileWidth.value = width;\r\n                this.calculate();\r\n            });\r\n        });\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = this.getInputValue('room-length');\r\n        const roomW = this.getInputValue('room-width');\r\n        const tileL = this.getInputValue('tile-length');\r\n        const tileW = this.getInputValue('tile-width');\r\n        const waste = this.getInputValue('waste-factor', 10);\r\n        const price = this.getInputValue('tile-price');\r\n        const grout = this.getInputValue('grout-width', 3);\r\n\r\n        if (roomL <= 0 || roomW <= 0 || tileL <= 0 || tileW <= 0) {\r\n            this.showError('Please enter valid dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area in square feet\r\n        const roomArea = roomL * roomW;\r\n\r\n        // Calculate tile area in square feet (convert inches to feet)\r\n        const tileAreaSqFt = (tileL * tileW) / 144;\r\n\r\n        // Calculate base number of tiles needed\r\n        const baseTiles = Math.ceil(roomArea / tileAreaSqFt);\r\n\r\n        // Calculate tiles with waste factor\r\n        const tilesWithWaste = Math.ceil(baseTiles * (1 + waste / 100));\r\n\r\n        // Calculate grout coverage (approximate)\r\n        const groutCoverage = this.calculateGroutCoverage(roomL, roomW, tileL, tileW, grout);\r\n\r\n        // Calculate estimated cost\r\n        const estimatedCost = roomArea * price;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomArea: roomArea.toFixed(2),\r\n            baseTiles: baseTiles,\r\n            tilesWithWaste: tilesWithWaste,\r\n            groutCoverage: groutCoverage.toFixed(2),\r\n            estimatedCost: estimatedCost.toFixed(2)\r\n        });\r\n\r\n        this.updateBoxCount();\r\n    }\r\n\r\n    calculateGroutCoverage(roomL, roomW, tileL, tileW, groutMM) {\r\n        // Convert grout width from mm to inches\r\n        const groutInches = groutMM / 25.4;\r\n\r\n        // Calculate approximate grout coverage\r\n        // This is a simplified calculation\r\n        const tilesPerRow = Math.ceil((roomL * 12) / (tileL + groutInches));\r\n        const tilesPerColumn = Math.ceil((roomW * 12) / (tileW + groutInches));\r\n\r\n        const horizontalGroutArea = tilesPerColumn * (roomL * 12) * groutInches;\r\n        const verticalGroutArea = tilesPerRow * (roomW * 12) * groutInches;\r\n\r\n        // Convert back to square feet\r\n        return (horizontalGroutArea + verticalGroutArea) / 144;\r\n    }\r\n\r\n    updateResults(results) {\r\n        this.setResultValue('room-area', results.roomArea, 'integer');\r\n        this.setResultValue('tiles-needed', results.baseTiles, 'integer');\r\n        this.setResultValue('tiles-with-waste', results.tilesWithWaste, 'integer');\r\n        this.setResultValue('grout-coverage', results.groutCoverage, 'integer');\r\n        this.setResultValue('estimated-cost', results.estimatedCost, 'currency');\r\n\r\n        // Store for box calculation\r\n        this.currentTilesNeeded = results.tilesWithWaste;\r\n    }\r\n\r\n    updateBoxCount() {\r\n        const tilesPerBox = parseInt(this.tilesPerBox.value) || 0;\r\n        const boxCountElement = document.getElementById('box-count');\r\n\r\n        if (tilesPerBox > 0 && this.currentTilesNeeded) {\r\n            const boxesNeeded = Math.ceil(this.currentTilesNeeded / tilesPerBox);\r\n            boxCountElement.textContent = `${boxesNeeded} boxes`;\r\n        } else {\r\n            boxCountElement.textContent = '0 boxes';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs\r\n        [this.roomLength, this.roomWidth, this.tileLength, this.tileWidth,\r\n         this.tilePrice, this.tilesPerBox].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.wasteFactor.value = '10';\r\n        this.groutWidth.value = '3';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('tiles-needed').textContent = '0 tiles';\r\n        document.getElementById('tiles-with-waste').textContent = '0 tiles';\r\n        document.getElementById('grout-coverage').textContent = '0 sq ft';\r\n        document.getElementById('estimated-cost').textContent = '$0.00';\r\n        document.getElementById('box-count').textContent = '0 boxes';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        // You could implement a toast notification or modal here\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Common tile sizes for quick reference\r\nconst commonTileSizes = {\r\n    '12x12': { length: 12, width: 12, name: '12\" √ó 12\" Standard' },\r\n    '12x24': { length: 12, width: 24, name: '12\" √ó 24\" Plank' },\r\n    '6x24': { length: 6, width: 24, name: '6\" √ó 24\" Wood-look' },\r\n    '18x18': { length: 18, width: 18, name: '18\" √ó 18\" Large Format' },\r\n    '24x24': { length: 24, width: 24, name: '24\" √ó 24\" Extra Large' },\r\n    '4x4': { length: 4, width: 4, name: '4\" √ó 4\" Small' },\r\n    '6x6': { length: 6, width: 6, name: '6\" √ó 6\" Medium' },\r\n    '8x8': { length: 8, width: 8, name: '8\" √ó 8\" Traditional' }\r\n};\r\n\r\n// Waste factor recommendations\r\nconst wasteFactorGuide = {\r\n    'straight': { min: 10, max: 15, description: 'Straight/Grid Pattern' },\r\n    'diagonal': { min: 15, max: 20, description: 'Diagonal Pattern' },\r\n    'herringbone': { min: 15, max: 25, description: 'Herringbone Pattern' },\r\n    'complex': { min: 20, max: 30, description: 'Complex Patterns' },\r\n    'irregular': { min: 15, max: 25, description: 'Irregular Rooms' }\r\n};\r\n\r\n// Utility functions\r\nfunction getTileRecommendation(roomArea) {\r\n    if (roomArea < 50) {\r\n        return 'Consider 12\"√ó12\" or smaller tiles for better proportions';\r\n    } else if (roomArea < 150) {\r\n        return '12\"√ó12\" or 12\"√ó24\" tiles work well for this size room';\r\n    } else if (roomArea < 300) {\r\n        return '12\"√ó24\" or 18\"√ó18\" tiles are ideal for larger spaces';\r\n    } else {\r\n        return '18\"√ó18\" or 24\"√ó24\" large format tiles for expansive areas';\r\n    }\r\n}\r\n\r\nfunction calculateGroutBags(groutCoverage, groutType = 'sanded') {\r\n    // Standard grout coverage: 25 lb bag covers ~150-200 sq ft\r\n    const coveragePerBag = groutType === 'sanded' ? 175 : 200;\r\n    return Math.ceil(groutCoverage / coveragePerBag);\r\n}\r\n\r\nfunction estimateInstallationTime(tilesNeeded, complexity = 'medium') {\r\n    const tilesPerHour = {\r\n        'easy': 15,    // Large tiles, straight pattern\r\n        'medium': 12,  // Standard tiles, basic pattern\r\n        'hard': 8      // Small tiles or complex pattern\r\n    };\r\n\r\n    const hoursNeeded = tilesNeeded / tilesPerHour[complexity];\r\n    return Math.ceil(hoursNeeded);\r\n}\r\n\r\n// Initialize calculator when page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new TileCalculator();\r\n        console.log('Tile Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Tile Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>‚ö†Ô∏è Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = TileCalculator;\r\n}\r\n"],"names":["CalculatorBase$1","calculatorType","options","input","min","max","error","msg","firstInput","message","errorDiv","main","el","data","saved","id","value","defaultValue","format","element","CalculatorBase","TileCalculator","btn","size","length","width","roomL","roomW","tileL","tileW","waste","price","grout","roomArea","tileAreaSqFt","baseTiles","tilesWithWaste","groutCoverage","estimatedCost","groutMM","groutInches","tilesPerRow","horizontalGroutArea","verticalGroutArea","results","tilesPerBox","boxCountElement","boxesNeeded"],"mappings":"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"}