{"version":3,"file":"hardwood-legacy-Do4n7Lie.js","sources":["../../hardwood-calculator.js"],"sourcesContent":["// Hardwood Flooring Calculator JavaScript\r\n\r\nclass HardwoodCalculator {\r\n    constructor() {\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.plankWidth = document.getElementById('plank-width');\r\n        this.plankLength = document.getElementById('plank-length');\r\n        this.plankThickness = document.getElementById('plank-thickness');\r\n        this.boardPrice = document.getElementById('board-price');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.layoutPattern = document.getElementById('layout-pattern');\r\n        this.installationCost = document.getElementById('installation-cost');\r\n        this.underlaymentCost = document.getElementById('underlayment-cost');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Real-time calculation on input change\r\n        [this.roomLength, this.roomWidth, this.plankWidth, this.plankLength,\r\n         this.plankThickness, this.boardPrice, this.wasteFactor, this.layoutPattern,\r\n         this.installationCost, this.underlaymentCost].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n\r\n        // Update waste factor based on pattern\r\n        this.layoutPattern.addEventListener('change', () => {\r\n            this.updateWasteFactorForPattern();\r\n            this.calculate();\r\n        });\r\n    }\r\n\r\n    updateWasteFactorForPattern() {\r\n        const pattern = this.layoutPattern.value;\r\n        const wasteFactors = {\r\n            'straight': 10,\r\n            'staggered': 12,\r\n            'herringbone': 22,\r\n            'diagonal': 17\r\n        };\r\n\r\n        if (wasteFactors[pattern]) {\r\n            this.wasteFactor.value = wasteFactors[pattern];\r\n        }\r\n    }\r\n\r\n    calculate() {\r\n        const roomL = parseFloat(this.roomLength.value) || 0;\r\n        const roomW = parseFloat(this.roomWidth.value) || 0;\r\n        const plankW = parseFloat(this.plankWidth.value) || 5;\r\n        const plankL = this.getPlankLength();\r\n        const plankT = parseFloat(this.plankThickness.value) || 0.75;\r\n        const boardPricePerBF = parseFloat(this.boardPrice.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const installCost = parseFloat(this.installationCost.value) || 0;\r\n        const underlayment = parseFloat(this.underlaymentCost.value) || 0;\r\n\r\n        if (roomL <= 0 || roomW <= 0) {\r\n            this.showError('Please enter valid room dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate room area\r\n        const roomAreaSqFt = roomL * roomW;\r\n\r\n        // Calculate board feet needed\r\n        const boardFeetPerSqFt = plankT / 12; // Convert thickness to feet\r\n        const baseBoardFeet = roomAreaSqFt * boardFeetPerSqFt;\r\n        const boardFeetWithWaste = baseBoardFeet * (1 + waste / 100);\r\n\r\n        // Calculate planks needed\r\n        const plankAreaSqFt = (plankW * plankL) / 144; // Convert to sq ft\r\n        const planksNeeded = Math.ceil(roomAreaSqFt / plankAreaSqFt);\r\n        const planksWithWaste = Math.ceil(planksNeeded * (1 + waste / 100));\r\n\r\n        // Calculate linear feet\r\n        const linearFeet = planksWithWaste * plankL;\r\n\r\n        // Calculate costs\r\n        const woodCost = boardFeetWithWaste * boardPricePerBF;\r\n        const underlaymentTotal = roomAreaSqFt * underlayment;\r\n        const installationTotal = roomAreaSqFt * installCost;\r\n        const totalCost = woodCost + underlaymentTotal + installationTotal;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            roomAreaSqFt: roomAreaSqFt.toFixed(1),\r\n            boardFeet: boardFeetWithWaste.toFixed(1),\r\n            planksNeeded: planksNeeded,\r\n            planksWithWaste: planksWithWaste,\r\n            linearFeet: linearFeet.toFixed(1),\r\n            woodCost: woodCost.toFixed(2),\r\n            underlaymentTotal: underlaymentTotal.toFixed(2),\r\n            installationTotal: installationTotal.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    getPlankLength() {\r\n        const lengthValue = this.plankLength.value;\r\n        if (lengthValue === 'mixed') {\r\n            // For mixed lengths, use average of 4 feet\r\n            return 4;\r\n        }\r\n        return parseFloat(lengthValue) || 4;\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('room-area').textContent = `${results.roomAreaSqFt} sq ft`;\r\n        document.getElementById('board-feet').textContent = `${results.boardFeet} bf`;\r\n        document.getElementById('planks-needed').textContent = `${results.planksNeeded} planks`;\r\n        document.getElementById('planks-with-waste').textContent = `${results.planksWithWaste} planks`;\r\n        document.getElementById('linear-feet').textContent = `${results.linearFeet} ft`;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if prices are entered\r\n        if (parseFloat(results.woodCost) > 0 || parseFloat(results.underlaymentTotal) > 0 || parseFloat(results.installationTotal) > 0) {\r\n            document.getElementById('wood-cost').textContent = `$${results.woodCost}`;\r\n            document.getElementById('underlayment-total').textContent = `$${results.underlaymentTotal}`;\r\n            document.getElementById('installation-total').textContent = `$${results.installationTotal}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomLength, this.roomWidth, this.boardPrice,\r\n         this.installationCost, this.underlaymentCost].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.plankWidth.value = '5';\r\n        this.plankLength.value = '4';\r\n        this.plankThickness.value = '0.75';\r\n        this.wasteFactor.value = '10';\r\n        this.layoutPattern.value = 'straight';\r\n\r\n        // Clear results\r\n        document.getElementById('room-area').textContent = '0 sq ft';\r\n        document.getElementById('board-feet').textContent = '0 bf';\r\n        document.getElementById('planks-needed').textContent = '0 planks';\r\n        document.getElementById('planks-with-waste').textContent = '0 planks';\r\n        document.getElementById('linear-feet').textContent = '0 ft';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomLength.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Hardwood species pricing guide (national averages per board foot)\r\nconst hardwoodPricing = {\r\n    'oak': { min: 3.50, max: 8.00, description: 'Red/White Oak - Most popular' },\r\n    'maple': { min: 4.00, max: 9.00, description: 'Hard Maple - Durable, light' },\r\n    'cherry': { min: 6.00, max: 12.00, description: 'Cherry - Premium hardwood' },\r\n    'walnut': { min: 8.00, max: 15.00, description: 'Black Walnut - Luxury' },\r\n    'hickory': { min: 4.50, max: 9.50, description: 'Hickory - Very hard' },\r\n    'ash': { min: 3.00, max: 7.00, description: 'Ash - Strong, flexible' },\r\n    'birch': { min: 3.50, max: 7.50, description: 'Birch - Smooth grain' }\r\n};\r\n\r\n// Installation complexity factors\r\nconst installationComplexity = {\r\n    'basic': { multiplier: 1.0, description: 'Simple rectangular room' },\r\n    'moderate': { multiplier: 1.3, description: 'Some obstacles, closets' },\r\n    'complex': { multiplier: 1.6, description: 'Many obstacles, custom cuts' },\r\n    'stairs': { multiplier: 2.5, description: 'Stair installation' }\r\n};\r\n\r\n// Subfloor requirements\r\nconst subfloorRequirements = {\r\n    'concrete': {\r\n        'solid': 'Not recommended without sleeper system',\r\n        'engineered': 'Requires moisture barrier and proper adhesive'\r\n    },\r\n    'plywood': {\r\n        'solid': 'Ideal - nail/staple installation',\r\n        'engineered': 'Excellent - multiple installation methods'\r\n    },\r\n    'osb': {\r\n        'solid': 'Acceptable if properly sealed',\r\n        'engineered': 'Good with proper preparation'\r\n    }\r\n};\r\n\r\n// Utility functions\r\nfunction calculateAcclimationTime(species, thickness, climate) {\r\n    const baseTime = thickness < 0.5 ? 3 : 5; // days\r\n    const speciesMultiplier = {\r\n        'oak': 1.0,\r\n        'maple': 1.2,\r\n        'cherry': 1.3,\r\n        'walnut': 1.1,\r\n        'hickory': 0.9\r\n    };\r\n\r\n    const climateMultiplier = {\r\n        'dry': 1.5,\r\n        'normal': 1.0,\r\n        'humid': 0.8\r\n    };\r\n\r\n    return Math.ceil(baseTime * (speciesMultiplier[species] || 1.0) * (climateMultiplier[climate] || 1.0));\r\n}\r\n\r\nfunction estimateInstallationTime(sqFt, complexity = 'basic', experience = 'diy') {\r\n    const baseRate = {\r\n        'professional': 80, // sq ft per day\r\n        'experienced_diy': 40,\r\n        'diy': 25\r\n    };\r\n\r\n    const complexityMultiplier = {\r\n        'basic': 1.0,\r\n        'moderate': 0.7,\r\n        'complex': 0.5\r\n    };\r\n\r\n    const dailyRate = baseRate[experience] * complexityMultiplier[complexity];\r\n    return Math.ceil(sqFt / dailyRate);\r\n}\r\n\r\nfunction calculateMoistureContent(species, environment) {\r\n    // Equilibrium moisture content recommendations\r\n    const emc = {\r\n        'dry_climate': 6, // Southwest US\r\n        'normal': 8,     // Most of US\r\n        'humid': 11      // Southeast, coastal areas\r\n    };\r\n\r\n    return emc[environment] || 8;\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new HardwoodCalculator();\r\n        console.log('Hardwood Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Hardwood Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = HardwoodCalculator;\r\n}\r\n"],"names":["HardwoodCalculator","constructor","this","roomLength","document","getElementById","roomWidth","plankWidth","plankLength","plankThickness","boardPrice","wasteFactor","layoutPattern","installationCost","underlaymentCost","calculateBtn","clearBtn","initializeEventListeners","addEventListener","calculate","clear","forEach","input","updateWasteFactorForPattern","pattern","value","wasteFactors","straight","staggered","herringbone","diagonal","roomL","parseFloat","roomW","plankW","plankL","getPlankLength","plankT","boardPricePerBF","waste","installCost","underlayment","showError","roomAreaSqFt","boardFeetWithWaste","plankAreaSqFt","planksNeeded","Math","ceil","planksWithWaste","linearFeet","woodCost","underlaymentTotal","installationTotal","totalCost","updateResults","toFixed","boardFeet","lengthValue","results","textContent","style","display","focus","message","console","error","log","errorDiv","createElement","className","innerHTML","main","querySelector","insertBefore","firstChild","module","exports"],"mappings":"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"}