{"version":3,"file":"baseboard-Bk0Fohrs.js","sources":["../../baseboard-calculator.js"],"sourcesContent":["// Baseboard & Trim Calculator JavaScript\r\n\r\nclass BaseboardCalculator {\r\n    constructor() {\r\n        this.roomPerimeter = document.getElementById('room-perimeter');\r\n        this.roomLength = document.getElementById('room-length');\r\n        this.roomWidth = document.getElementById('room-width');\r\n        this.doorWidth = document.getElementById('door-width');\r\n        this.windowWidth = document.getElementById('window-width');\r\n        this.otherOpenings = document.getElementById('other-openings');\r\n        this.corners = document.getElementById('corners');\r\n        this.trimType = document.getElementById('trim-type');\r\n        this.trimLength = document.getElementById('trim-length');\r\n        this.pricePerFoot = document.getElementById('price-per-foot');\r\n        this.wasteFactor = document.getElementById('waste-factor');\r\n        this.nailsScrews = document.getElementById('nails-screws');\r\n        this.caulkCost = document.getElementById('caulk-cost');\r\n        this.paintPrimer = document.getElementById('paint-primer');\r\n        this.laborCost = document.getElementById('labor-cost');\r\n\r\n        this.calculateBtn = document.getElementById('calculate-btn');\r\n        this.clearBtn = document.getElementById('clear-btn');\r\n\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        this.calculateBtn.addEventListener('click', () => this.calculate());\r\n        this.clearBtn.addEventListener('click', () => this.clear());\r\n\r\n        // Auto-calculate perimeter from dimensions\r\n        [this.roomLength, this.roomWidth].forEach(input => {\r\n            input.addEventListener('input', () => {\r\n                this.updatePerimeter();\r\n                this.calculate();\r\n            });\r\n        });\r\n\r\n        // Real-time calculation on other inputs\r\n        [this.roomPerimeter, this.doorWidth, this.windowWidth, this.otherOpenings,\r\n         this.corners, this.trimType, this.trimLength, this.pricePerFoot,\r\n         this.wasteFactor, this.nailsScrews, this.caulkCost, this.paintPrimer,\r\n         this.laborCost].forEach(input => {\r\n            input.addEventListener('input', () => this.calculate());\r\n            input.addEventListener('change', () => this.calculate());\r\n        });\r\n\r\n        // Update waste factor based on trim type\r\n        this.trimType.addEventListener('change', () => {\r\n            this.updateWasteFactorForTrimType();\r\n            this.calculate();\r\n        });\r\n    }\r\n\r\n    updatePerimeter() {\r\n        const length = parseFloat(this.roomLength.value) || 0;\r\n        const width = parseFloat(this.roomWidth.value) || 0;\r\n\r\n        if (length > 0 && width > 0) {\r\n            const perimeter = 2 * (length + width);\r\n            this.roomPerimeter.value = perimeter.toFixed(1);\r\n        }\r\n    }\r\n\r\n    updateWasteFactorForTrimType() {\r\n        const trimType = this.trimType.value;\r\n        const wasteFactors = {\r\n            'baseboard': 10,\r\n            'crown': 18,\r\n            'chair-rail': 12,\r\n            'quarter-round': 15,\r\n            'shoe-molding': 15,\r\n            'casing': 20\r\n        };\r\n\r\n        if (wasteFactors[trimType]) {\r\n            this.wasteFactor.value = wasteFactors[trimType];\r\n        }\r\n    }\r\n\r\n    calculate() {\r\n        const perimeter = parseFloat(this.roomPerimeter.value) || 0;\r\n        const doorW = parseFloat(this.doorWidth.value) || 0;\r\n        const windowW = parseFloat(this.windowWidth.value) || 0;\r\n        const otherW = parseFloat(this.otherOpenings.value) || 0;\r\n        const numCorners = parseInt(this.corners.value) || 0;\r\n        const trimLen = parseFloat(this.trimLength.value) || 12;\r\n        const pricePerFt = parseFloat(this.pricePerFoot.value) || 0;\r\n        const waste = parseFloat(this.wasteFactor.value) || 10;\r\n        const nailsCost = parseFloat(this.nailsScrews.value) || 0;\r\n        const caulkCostTotal = parseFloat(this.caulkCost.value) || 0;\r\n        const paintCost = parseFloat(this.paintPrimer.value) || 0;\r\n        const laborPerFt = parseFloat(this.laborCost.value) || 0;\r\n\r\n        if (perimeter <= 0) {\r\n            this.showError('Please enter room perimeter or dimensions');\r\n            return;\r\n        }\r\n\r\n        // Calculate net linear feet needed\r\n        const totalOpenings = doorW + windowW + otherW;\r\n        const netLinearFeet = Math.max(0, perimeter - totalOpenings);\r\n\r\n        // Add waste factor\r\n        const linearFeetWithWaste = netLinearFeet * (1 + waste / 100);\r\n\r\n        // Calculate pieces needed\r\n        const piecesNeeded = Math.ceil(linearFeetWithWaste / trimLen);\r\n\r\n        // Calculate cuts\r\n        const cuts = this.calculateCuts(numCorners, this.trimType.value);\r\n\r\n        // Calculate costs\r\n        const trimCost = linearFeetWithWaste * pricePerFt;\r\n        const laborTotal = netLinearFeet * laborPerFt;\r\n        const totalCost = trimCost + nailsCost + caulkCostTotal + paintCost + laborTotal;\r\n\r\n        // Update display\r\n        this.updateResults({\r\n            netLinearFeet: netLinearFeet.toFixed(1),\r\n            linearFeetWithWaste: linearFeetWithWaste.toFixed(1),\r\n            piecesNeeded: piecesNeeded,\r\n            cornerCuts: cuts.cornerCuts,\r\n            miterCuts: cuts.miterCuts,\r\n            trimCost: trimCost.toFixed(2),\r\n            nailsCost: nailsCost.toFixed(2),\r\n            caulkCostTotal: caulkCostTotal.toFixed(2),\r\n            paintCost: paintCost.toFixed(2),\r\n            laborTotal: laborTotal.toFixed(2),\r\n            totalCost: totalCost.toFixed(2)\r\n        });\r\n    }\r\n\r\n    calculateCuts(corners, trimType) {\r\n        let cornerCuts = 0;\r\n        let miterCuts = 0;\r\n\r\n        if (corners > 0) {\r\n            if (trimType === 'crown') {\r\n                // Crown molding requires compound miter cuts\r\n                cornerCuts = corners;\r\n                miterCuts = corners * 2; // Two cuts per corner\r\n            } else {\r\n                // Regular trim\r\n                cornerCuts = corners;\r\n                miterCuts = Math.floor(corners * 1.5); // Mix of coped and mitered\r\n            }\r\n        }\r\n\r\n        return { cornerCuts, miterCuts };\r\n    }\r\n\r\n    updateResults(results) {\r\n        document.getElementById('linear-feet-needed').textContent = `${results.netLinearFeet} ft`;\r\n        document.getElementById('linear-feet-waste').textContent = `${results.linearFeetWithWaste} ft`;\r\n        document.getElementById('pieces-needed').textContent = `${results.piecesNeeded} pieces`;\r\n        document.getElementById('corner-cuts').textContent = results.cornerCuts;\r\n        document.getElementById('miter-cuts').textContent = results.miterCuts;\r\n        document.getElementById('total-cost').textContent = `$${results.totalCost}`;\r\n\r\n        // Show cost breakdown if any costs are entered\r\n        if (parseFloat(results.trimCost) > 0 || parseFloat(results.laborTotal) > 0) {\r\n            document.getElementById('trim-cost').textContent = `$${results.trimCost}`;\r\n            document.getElementById('fastener-cost').textContent = `$${results.nailsCost}`;\r\n            document.getElementById('caulk-total').textContent = `$${results.caulkCostTotal}`;\r\n            document.getElementById('paint-total').textContent = `$${results.paintCost}`;\r\n            document.getElementById('labor-total').textContent = `$${results.laborTotal}`;\r\n            document.getElementById('cost-breakdown').style.display = 'block';\r\n        } else {\r\n            document.getElementById('cost-breakdown').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        // Clear all inputs except defaults\r\n        [this.roomPerimeter, this.roomLength, this.roomWidth, this.pricePerFoot,\r\n         this.nailsScrews, this.caulkCost, this.paintPrimer, this.laborCost].forEach(input => {\r\n            input.value = '';\r\n        });\r\n\r\n        // Reset to defaults\r\n        this.doorWidth.value = '6';\r\n        this.windowWidth.value = '0';\r\n        this.otherOpenings.value = '0';\r\n        this.corners.value = '4';\r\n        this.trimType.value = 'baseboard';\r\n        this.trimLength.value = '12';\r\n        this.wasteFactor.value = '10';\r\n\r\n        // Clear results\r\n        document.getElementById('linear-feet-needed').textContent = '0 ft';\r\n        document.getElementById('linear-feet-waste').textContent = '0 ft';\r\n        document.getElementById('pieces-needed').textContent = '0 pieces';\r\n        document.getElementById('corner-cuts').textContent = '0 cuts';\r\n        document.getElementById('miter-cuts').textContent = '0 cuts';\r\n        document.getElementById('total-cost').textContent = '$0.00';\r\n        document.getElementById('cost-breakdown').style.display = 'none';\r\n\r\n        this.roomPerimeter.focus();\r\n    }\r\n\r\n    showError(message) {\r\n        console.error(message);\r\n    }\r\n}\r\n\r\n// Trim pricing guide (national averages per linear foot)\r\nconst trimPricing = {\r\n    'pine': { min: 1.50, max: 3.50, description: 'Pine - Budget friendly' },\r\n    'poplar': { min: 2.00, max: 4.50, description: 'Poplar - Paint grade' },\r\n    'oak': { min: 3.50, max: 8.00, description: 'Oak - Traditional stain grade' },\r\n    'maple': { min: 4.00, max: 9.00, description: 'Maple - Smooth finish' },\r\n    'cherry': { min: 6.00, max: 12.00, description: 'Cherry - Premium hardwood' },\r\n    'mdf': { min: 1.00, max: 2.50, description: 'MDF - Smooth paint finish' }\r\n};\r\n\r\n// Standard trim profiles\r\nconst trimProfiles = {\r\n    'baseboard': {\r\n        'colonial': { height: '3.5\"', complexity: 'simple' },\r\n        'craftsman': { height: '5.25\"', complexity: 'moderate' },\r\n        'modern': { height: '4.5\"', complexity: 'simple' },\r\n        'traditional': { height: '6\"', complexity: 'complex' }\r\n    },\r\n    'crown': {\r\n        'simple': { projection: '3\"', complexity: 'moderate' },\r\n        'traditional': { projection: '4.5\"', complexity: 'complex' },\r\n        'elaborate': { projection: '6\"', complexity: 'very complex' }\r\n    }\r\n};\r\n\r\n// Installation difficulty factors\r\nconst installationDifficulty = {\r\n    'baseboard': { skill: 'beginner', time_per_foot: 0.1 }, // hours\r\n    'crown': { skill: 'advanced', time_per_foot: 0.3 },\r\n    'chair-rail': { skill: 'intermediate', time_per_foot: 0.15 },\r\n    'quarter-round': { skill: 'beginner', time_per_foot: 0.08 },\r\n    'casing': { skill: 'intermediate', time_per_foot: 0.2 }\r\n};\r\n\r\n// Tool requirements by trim type\r\nconst toolRequirements = {\r\n    'basic': ['miter saw', 'nail gun', 'measuring tape', 'level', 'coping saw'],\r\n    'advanced': ['compound miter saw', 'pneumatic nailer', 'laser level', 'router', 'biscuit joiner'],\r\n    'crown_molding': ['compound miter saw', 'crown stops', 'pneumatic nailer', 'coping saw', 'angle finder']\r\n};\r\n\r\n// Utility functions\r\nfunction estimateInstallationTime(linearFeet, trimType, skillLevel = 'intermediate') {\r\n    const baseTime = installationDifficulty[trimType]?.time_per_foot || 0.15;\r\n    const skillMultiplier = {\r\n        'beginner': 2.0,\r\n        'intermediate': 1.0,\r\n        'advanced': 0.7,\r\n        'professional': 0.5\r\n    };\r\n\r\n    return linearFeet * baseTime * (skillMultiplier[skillLevel] || 1.0);\r\n}\r\n\r\nfunction calculateNailsNeeded(linearFeet, spacing = 16) {\r\n    // Spacing in inches, typically 16\" on center\r\n    const nailsPerFoot = 12 / spacing;\r\n    return Math.ceil(linearFeet * nailsPerFoot * 1.1); // 10% extra\r\n}\r\n\r\nfunction calculateCaulkTubes(linearFeet, gapSize = 'normal') {\r\n    const coveragePerTube = {\r\n        'small': 100, // linear feet\r\n        'normal': 75,\r\n        'large': 50\r\n    };\r\n\r\n    return Math.ceil(linearFeet / (coveragePerTube[gapSize] || 75));\r\n}\r\n\r\nfunction calculatePaintNeeded(linearFeet, trimHeight, coats = 2) {\r\n    // Convert height from inches to feet\r\n    const heightFt = trimHeight / 12;\r\n    const surfaceArea = linearFeet * heightFt * 2; // Both sides\r\n    const coverage = 350; // sq ft per gallon\r\n\r\n    return Math.ceil((surfaceArea * coats) / coverage * 4) / 4; // Round to nearest quart\r\n}\r\n\r\n// Initialize calculator\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    try {\r\n        new BaseboardCalculator();\r\n        console.log('Baseboard Calculator initialized successfully');\r\n    } catch (error) {\r\n        console.error('Failed to initialize Baseboard Calculator:', error);\r\n        // Show user-friendly error message\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.innerHTML = '<p>⚠️ Calculator failed to load. Please refresh the page or try again later.</p>';\r\n        const main = document.querySelector('main');\r\n        if (main) {\r\n            main.insertBefore(errorDiv, main.firstChild);\r\n        }\r\n    }\r\n});\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = BaseboardCalculator;\r\n}\r\n"],"names":["BaseboardCalculator","input","length","width","perimeter","trimType","wasteFactors","doorW","windowW","otherW","numCorners","trimLen","pricePerFt","waste","nailsCost","caulkCostTotal","paintCost","laborPerFt","totalOpenings","netLinearFeet","linearFeetWithWaste","piecesNeeded","cuts","trimCost","laborTotal","totalCost","corners","cornerCuts","miterCuts","results","message","error","errorDiv","main"],"mappings":"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"}